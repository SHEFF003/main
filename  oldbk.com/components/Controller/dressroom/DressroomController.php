<?php
/**
 * Created by PhpStorm.
 * User: me
 * Date: 13.12.16
 * Time: 20:45
 */

namespace components\Controller\dressroom;


use components\Component\Slim\Middleware\ClientScript\ClientScript;
use components\Component\VarDumper;
use components\Controller\_base\BaseEnciclController;
use components\Helper\FileHelper;
use components\Helper\Json;
use components\Model\DressroomCompl;
use components\Model\Shop;
use components\Model\User;
use components\Object\Item;
use Aws\S3\S3Client;

class DressroomController extends BaseEnciclController
{
	public $layout = 'dressroom';
	protected $cache = false;

	protected function beforeAction($action)
	{
		return parent::beforeAction($action); //TODO: Change the autogenerated stub
	}

	public function indexAction()
	{
		$this->title = sprintf('Примерочная | %s', $this->title);
		$this->layout = 'dressroom_new';


		$this->app->clientScript
			->registerJsFile('/eassets/dressroom/js/scripts.min.js', ClientScript::JS_POSITION_BEGIN);

		$this->app->clientScript
			->registerCssFile('/eassets/dressroom/css/styles.min.css');

		$data = [];
		$key = $this->app->request->get('key', null);
		if($key) {
			$_data = $this->load($key);
			if($_data) {
				$data = json_encode($_data);
			}
		}

		$sets = [];
		$User = null;
		if(isset($_SESSION['uid'])) {
			$User = User::findByPk($_SESSION['uid'])->asArray();
			$sets = DressroomCompl::findAll('user_id = ? and title is not null and status = 1', [$_SESSION['uid']], ['title', 'code'])->asArray();
		}

		$this->render('index', ['data' => $data, 'sets' => $sets, 'user' => $User]);
	}

	public function newAction()
	{
		$a = $this->app->request->get('a');
		if($a != 'b') {
			$this->redirect($this->app->urlFor('encicl_redirect'));
		}

		$this->title = sprintf('Примерочная | %s', $this->title);
		$this->layout = 'dressroom_new';


		$this->app->clientScript
			->registerJsFile('/eassets/main/js/scripts.js')
			//->registerJsFile('/eassets/dressroom/assets/js/polymorph-1.0.1.js')
			//->registerJsFile('/eassets/dressroom/assets/js/dummy.js')
			//->registerJsFile('/eassets/dressroom/assets/js/handlers.js')
			->registerJsFile('/eassets/dressroom/js/all_d_room_123321.js', ClientScript::JS_POSITION_BEGIN);

		$this->app->clientScript
			->registerCssFile('/eassets/main/css/styles.css')
			->registerCssFile('/eassets/dressroom/css/all_d_room_123321.css');

		$data = [];
		$key = $this->app->request->get('key', null);
		if($key) {
			$_data = $this->load($key);
			if($_data) {
				$data = json_encode($_data);
			}
		}

		$sets = [];
		$User = null;
		if(isset($_SESSION['uid'])) {
			$User = User::findByPk($_SESSION['uid'])->asArray();
			$sets = DressroomCompl::findAll('user_id = ? and title is not null and status = 1', [$_SESSION['uid']], ['title', 'code'])->asArray();
		}

		$this->render('new', ['data' => $data, 'sets' => $sets, 'user' => $User]);
	}

	private function load($key)
	{
		$Model = DressroomCompl::find('code = ? and status = 1', [$key])->asArray();
		if(!$Model) {
			return false;
		}

		$json = file_get_contents($Model['link']);
		return json_decode($json, true);
	}

	public function dropAction()
	{
		$code = $this->app->request->post('code');
		if(!isset($_SESSION['uid'])) {
			$this->renderJSON([
				'status' => 0
			]);
		}

		DressroomCompl::update(['status' => 3], 'code = ? and user_id = ?', [$code, $_SESSION['uid']]);
		$this->renderJSON([
			'status' => 1
		]);
	}

	public function saveAction()
	{
		$db = $this->app->db;
		$db->beginTransaction();
		try {
			$aws = $this->app->config('aws');
			$s3Client = new S3Client([
				'version'     => 'latest',
				'region'      => 'eu-west-1',
				'credentials' => [
					'key'    => $aws['key'],
					'secret' => $aws['secret'],
				],
			]);

			$json = $_POST['json'];
			$key = md5(md5(time()). time());

			$Model = new DressroomCompl();
			$Model->user_id = isset($_SESSION['uid']) ? $_SESSION['uid'] : null;
			$Model->title = isset($_POST['title']) ? iconv('utf8', 'cp1251', $_POST['title']) : null;
			$Model->code = $key;
			$Model->created_at = time();
			if(!$Model->save()) {
				throw new \Exception();
			}

			 /** @var \Aws\Result $result */
			$result = $s3Client->upload('oldbkstatic', 'i/dressroom/'.$key.'.json', $json, 'public-read');
			if(!$result) {
				throw new \Exception();
			}

			if(!DressroomCompl::update(['link' => $result->toArray()['ObjectURL'], 'status' => 1], 'code = ?', [$key])) {
				throw new \Exception();
			}

			$db->commit();

			$this->renderJSON([
				'status' => 1,
				'key' => $key
			]);
		} catch (\Exception $ex) {
			$db->rollBack();

			$this->renderJSON([
				'status' => 0
			]);
		}
	}

	public function loadAction()
	{
		$key = $this->app->request->post('key', null);
		$data = $this->load($key);
		if(!$data) {
			$this->renderJSON([
				'status' => 0,
				//'error' => json_last_error(),
			]);
		}

		echo json_encode([
			'status' => 1,
			'data' => $data,
		]);
		exit;

		$this->renderJSON([
			'status' => 1,
			'data' => $data,
		]);
	}

	private $validRazdel = [
		1 		=> 'knife',
		11 		=> 'ax',
		12 		=> 'baton',
		13 		=> 'sword',
		1000 	=> 'flowers',
		2 		=> 'shoes',
		21 		=> 'glove',
		22 		=> 'larmor',
		23 		=> 'armor',
		24 		=> 'helmet',
		3 		=> 'shield',
		4 		=> 'earrings',
		41 		=> 'necklace',
		42 		=> 'ring',
		100 	=> 'tshort',
		101 	=> 'cloak',
		102 	=> 'rune',
	];

	public function itemsAction()
	{
		$response = [
			'status' 	=> 1,
			'items' 	=> [],
		];

		try {
			$items = [
				'shop' 		=> [],
				'bereza' 	=> [],
				'hram'		=> [],
				'fair'		=> [],
			];
			$db = $this->app->db;

			$shopStmt = $db->select('s.*, di.*')
				->from('shop s')
				->join('inner join dressroom_items di on di.item_id = s.id')
				->where('di.is_active = 1 and di.shop_id = 1')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items['shop'][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}

			$shopStmt = $db->select('s.*, di.*')
				->from('eshop s')
				->join('inner join dressroom_items di on di.item_id = s.id')
				->where('di.is_active = 1 and di.shop_id = 2')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items['bereza'][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}

			$shopStmt = $db->select('s.*, di.*')
				->from('cshop s')
				->join('inner join dressroom_items di on di.item_id = s.id')
				->where('di.is_active = 1 and di.shop_id = 3')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items['hram'][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}

			$shopStmt = $db->select('s.*, di.*')
				->from('cshop s')
				->join('inner join dressroom_items di on di.item_id = s.id')
				->where('di.is_active = 1 and di.shop_id = 6')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items['fair'][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}

			$response['items'] = $items;
		} catch (\Exception $ex) {
			$response = [
				'status' => 0,
				//'error' => $ex->getMessage(),
			];
		}

		$this->renderJSON($response);
	}

	private $_shop = [
		1 => 'shop',
		2 => 'bereza',
		3 => 'hram',
		6 => 'fair',
	];

	public function items2Action()
	{
		$response = [
			'status' 	=> 1,
			'items' 	=> [],
		];

		try {
			$items = [
				'shop' 		=> [],
				'bereza' 	=> [],
				'hram'		=> [],
				'fair'		=> [],
			];
			$db = $this->app->db;

			$shopStmt = $db->select('s.*, di.*')
				->from('shop s')
				->join('inner join dressroom_items di on di.item_id = s.id')
				->where('di.is_active = 1 and di.shop_id = 1')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items[$this->_shop[$row['dressroom_shop_id']]][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}
			$additional_shop = $this->additionalItems();
			foreach ($additional_shop as $_category => $_category_items) {
				foreach ($_category_items as $_additional_item) {
					$items['shop'][$_category][] = $this->prepareItem($_additional_item, $_category);
				}
			}

			$shopStmt = $db->select('s.*, di.*')
				->from('eshop s')
				->join('inner join dressroom_items di on di.item_id = s.id and di.shop_id = 2')
				->where('di.is_active = 1')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items[$this->_shop[$row['dressroom_shop_id']]][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}

			$shopStmt = $db->select('s.*, di.*')
				->from('cshop s')
				->join('inner join dressroom_items di on di.item_id = s.id')
				->where('di.is_active = 1 and di.shop_id = 3')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items[$this->_shop[$row['dressroom_shop_id']]][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}

			$shopStmt = $db->select('s.*, di.*')
				->from('shop s')
				->join('inner join dressroom_items di on di.item_id = s.id')
				->where('di.is_active = 1 and di.shop_id = 6')
				->whereIn('di.category_id', array_keys($this->validRazdel))
				->orderBy('s.nlevel asc')
				->execute();
			while ($row = $shopStmt->fetch(\PDO::FETCH_ASSOC)) {
				$items[$this->_shop[$row['dressroom_shop_id']]][$this->validRazdel[$row['category_id']]][] = $this->prepareItem($row, $this->validRazdel[$row['category_id']]);
			}

			$response['items'] = $items;
		} catch (\Exception $ex) {
			$response = [
				'status' => 0,
				'error' => $ex->getMessage(),
			];
		}

		$this->renderJSON($response);
	}

	private function runes()
	{
		return [
			'shop' => [
				[]
			]
		];
	}


	private $runs_5lvl_param = [
		6000 => ["mf" => 0, "armor" => 0, "damage" => 1],
		6001 => ["mf" => 0, "armor" => 3, "damage" => 0],
		6002 => ["mf" => 1, "armor" => 0, "damage" => 0],
		6003 => ["mf" => 0, "armor" => 0, "damage" => 1],
		6004 => ["mf" => 0, "armor" => 3, "damage" => 0],
		6005 => ["mf" => 1, "armor" => 0, "damage" => 0],
		6006 => ["mf" => 0, "armor" => 0, "damage" => 1],
		6007 => ["mf" => 0, "armor" => 3, "damage" => 0],
		6008 => ["mf" => 1, "armor" => 0, "damage" => 0],
		6009 => ["mf" => 0, "armor" => 0, "damage" => 1],
		6010 => ["mf" => 0, "armor" => 3, "damage" => 0],
		6011 => ["mf" => 1, "armor" => 0, "damage" => 0],
		6012 => ["mf" => 0, "armor" => 0, "damage" => 1],
		6013 => ["mf" => 0, "armor" => 3, "damage" => 0],
		6014 => ["mf" => 1, "armor" => 0, "damage" => 0],
		6015 => ["mf" => 0, "armor" => 0, "damage" => 1],
		6016 => ["mf" => 0, "armor" => 3, "damage" => 0],
		6017 => ["mf" => 1, "armor" => 0, "damage" => 0],
	];

	private $id = 0;
	private function prepareItem($item, $category)
	{
		$this->id++;
		$Item = new Item($item);

		try {
			$response = [
				'id' 			=> $this->id,
				'image' 		=> sprintf('https://i.oldbk.com/i/sh/%s', $Item->item->img),
				'name' 			=> $Item->item->name,
				'durability' 	=> (int)$Item->item->maxdur,
				'weight' 		=> (int)$Item->item->massa,
				'isArt' 		=> (int)$Item->isArt(),
				'isUnlim'		=> (int)$Item->isUnlim(),
				'type'			=> (int)$Item->item->type,
				'rareitem'		=> (int)$Item->item->rareitem,
				'letter'		=> $Item->item->letter,
				'category'		=> $category,
				'shop'			=> $item['shop_id'],
				'art'			=> [
					'hram'		=> (int)$Item->isArt() && $item['shop_id'] == 3,
					'lichka' 	=> false,
					'flowers'	=> (int)$Item->isArt() && $category == 'flowers',
				],
				'start_mod' 	=> [
					'isMF'			=> $item['is_mf'],
					'u'				=> $item['is_unik'],
					'uu'			=> $item['is_uunik'],
				],
				'access'		=> [
					'mf'		=> $item['can_mf'],
					'podgon'	=> $item['can_podgon'],
					'u'			=> $item['can_u'],
					'uu'		=> $item['can_uu'],
					'sharpen'	=> isset($item['can_sharpen']) ? $item['can_sharpen'] : true,
					'charka'	=> true,
					'art_usil'	=> $item['can_u_art'],
				],

				'price'			=> [
					'gold'	=> (int)$Item->getGold(),
					'kr' 	=> (float)$Item->item->cost, 2, '.', '',
					'ekr' 	=> (float)$Item->item->ecost, 2, '.', '',
					'rep' 	=> (float)$Item->item->repcost, 2, '.', '',
				],
				/*'section' => [
					'give' => ($Item->item->gmeshok || $Item->item->gsila || $Item->item->mfkrit || $Item->item->mfakrit || $Item->item->mfuvorot || $Item->item->mfauvorot || $Item->item->glovk || $Item->item->ghp || $Item->item->ginta || $Item->item->gintel || $Item->item->gnoj || $Item->item->gtopor || $Item->item->gdubina || $Item->item->gmech || $Item->item->gfire || $Item->item->gwater || $Item->item->gair || $Item->item->gearth || $Item->item->gearth || $Item->item->glight || $Item->item->ggray || $Item->item->gdark || $Item->item->minu || $Item->item->maxu || $Item->item->bron1 || $Item->item->bron2 || $Item->item->bron3 || $Item->item->bron4 || $Item->item->craftbonus || $Item->item->craftspeedup || (isset($Item->item->mfchance) && $Item->item->mfchance > 0)),
					'need' => ((is_object($Item->incmagic) && $Item->incmagic->nlevel > 0) || $Item->item->nsex || $Item->item->nsila || $Item->item->nlovk || $Item->item->ninta || $Item->item->nvinos || $Item->item->nlevel || $Item->item->nintel || $Item->item->nmudra || $Item->item->nnoj || $Item->item->ntopor || $Item->item->ndubina || $Item->item->nmech || $Item->item->nfire || $Item->item->nwater || $Item->item->nair || $Item->item->nearth || $Item->item->nlight || $Item->item->ngray || $Item->item->ndark),
					'limit' => ((is_object($Item->magic) && strlen($Item->magic->name) && ($Item->magic->us_type > 0 || $Item->magic->target_type > 0)) || (is_object($Item->magic) && strlen($Item->magic->img) && $Item->item->type == 12 && $Item->item->dategoden == 0) || ((is_object($Item->magic) && $Item->item->type == 12) && (!strlen($Item->magic->img) || $Item->item->dategoden > 0)) || !$Item->item->isrep || $Item->item->goden || $Item->item->notsell),
					'property' => ($Item->item->id == 30012 || (is_object($Item->magic) && strlen($Item->magic->name) && $Item->item->type == 50) || $Item->item->rareitem > 0 || $Item->item->type == 27 || $Item->item->type == 28 || (is_object($Item->magic) && strlen($Item->magic->name) && $Item->item->type != 50) || (is_object($Item->magic) && $Item->magic->chanse) || (is_object($Item->magic) && $Item->magic->time) || is_object($Item->incmagic)),
					'usil' => ($Item->item->ab_mf > 0 || $Item->item->ab_bron || $Item->item->ab_uron || ($Item->item->id >= 55510301 && $Item->item->id <= 55510401) || $Item->item->type == 30),
				],*/
				'info'	=> [
					'goden' => $Item->item->goden,
					'isrep' => $Item->item->isrep,
					'notsell' => $Item->item->notsell,
				],
				'need' => [
					'level' 		=> (int)$Item->item->nlevel,
					'align' 		=> floatval($Item->item->nalign),
					'gender' 		=> $Item->item->nsex === null ? null : (int)$Item->item->nsex,
					'needident' 	=> (int)$Item->item->needident,
					'class'			=> (int)$Item->item->nclass,

					'strange' 	=> (int)$Item->item->nsila,
					'agility' 	=> (int)$Item->item->nlovk,
					'intuition' => (int)$Item->item->ninta,
					'endurance' => (int)$Item->item->nvinos,
					'intellect' => 0,
					'wisdom' 	=> 0,

					'knife' => (int)$Item->item->nnoj,
					'ax' 	=> (int)$Item->item->ntopor,
					'sword' => (int)$Item->item->nmech,
					'baton' => (int)$Item->item->ndubina,

					'fire' 	=> (int)$Item->item->nfire,
					'water' => (int)$Item->item->nwater,
					'earth' => (int)$Item->item->nearth,
					'air' 	=> (int)$Item->item->nair,
					'grey' 	=> (int)$Item->item->ngray,
					'light' => (int)$Item->item->nair,
					'dark' 	=> (int)$Item->item->ndark
				],
				'give' => [
					'bonus' => [
						'craft' 		=> (float)$Item->item->craftbonus,
						'craftsu' 		=> (float)$Item->item->craftspeedup,
						'elka'			=> (int)$Item->getElkaBuketBonus(),
						'exp'			=> 0,
						'ab'			=> isset($this->runs_5lvl_param[$Item->item->id]) ? $this->runs_5lvl_param[$Item->item->id] : false,
					],

					'hp' => (int)$Item->item->ghp,
					'mp' => (int)$Item->item->gmp,

					'strange' 	=> (int)$Item->item->gsila,
					'agility' 	=> (int)$Item->item->glovk,
					'intuition' => (int)$Item->item->ginta,
					'intellect' => (int)$Item->item->gintel,
					'wisdom' 	=> (int)0,

					'min_damage' => (int)$Item->item->minu,
					'max_damage' => (int)$Item->item->maxu,

					'critical' 		=> (int)$Item->item->mfkrit,
					'p_critical'	=> (int)$Item->item->mfakrit,
					'flee' 			=> (int)$Item->item->mfuvorot,
					'p_flee' 		=> (int)$Item->item->mfauvorot,

					'knife' => (int)$Item->item->gnoj,
					'ax' 	=> (int)$Item->item->gtopor,
					'baton' => (int)$Item->item->gdubina,
					'sword' => (int)$Item->item->gmech,

					'fire' 	=> (int)$Item->item->gfire,
					'water' => (int)$Item->item->gwater,
					'earth' => (int)$Item->item->gearth,
					'air' 	=> (int)$Item->item->gair,
					'grey' 	=> (int)$Item->item->ggray,
					'light' => (int)$Item->item->glight,
					'dark' 	=> (int)$Item->item->gdark,

					'armor' => [
						'head' => (int)$Item->item->bron1,
						'body' => (int)$Item->item->bron2,
						'belt' => (int)$Item->item->bron3,
						'feet' => (int)$Item->item->bron4,
					],
					'increased' => [
						'damage' 	=> (int)$Item->item->ab_uron,
						'armor' 	=> (int)$Item->item->ab_bron,
						'mf' 		=> (int)$Item->item->ab_mf,
					],
					'free' => [
						'stats' => (int)$Item->item->stbonus,
						'mf' 	=> (int)$Item->item->mfbonus,
					],
				]
			];
		} catch (\Exception $ex) {
			var_dump($ex->getTraceAsString());
		}

		unset($Item);

		return $response;
	}

	private function additionalItems()
	{
		$_chaos_settings = require_once(ROOT_DIR . '/components/config/dressroom/chaos_settings.php');

		$_items = $_items_return = [];
		$Items = Shop::findAll('id in (1006232, 1006233, 1006234)')->asArray();
		foreach ($Items as $Item) {
			$_items[$Item['id']] = $Item;
		}

		foreach (['ax', 'baton', 'sword'] as $category) {
			foreach ($_chaos_settings['placeholder'][$category] as $_placeholder_item) {
				$upgrr = [
					'udar' => 0,
					'nparam' => 0,
				];
				$name = $_placeholder_item['name'];

				for($level = 7; $level < 15; $level++) {
					$upgrr['udar']		+= $_chaos_settings['upgrade'][$level]['udar'];
					$upgrr['nparam']	+= $_chaos_settings['upgrade'][$level]['nparam'];

					$deft = 5;
					if ($level >= 10 && $level <= 14) {
						$deft = $level-4;
					}

					$_placeholder_item['name'] = sprintf($name, $deft);

					$_items_return[$category][] = array_merge($_items[$_placeholder_item['prototype']], [
						'shop_id'		=> 1,
						'is_mf' 		=> false,
						'is_unik'		=> false,
						'is_uunik'		=> false,

						'can_mf' 		=> false,
						'can_podgon'	=> false,
						'can_u' 		=> false,
						'can_uu'		=> false,
						'can_u_art' 	=> false,
						'can_sharpen' 	=> false,

						'nlevel' 		=> $level,
						'up_level' 		=> $level,
						'nsila' 		=> $_chaos_settings['upgrade'][$level][$category]['nsila'] + $upgrr['nparam'],
						'nlovk' 		=> $_chaos_settings['upgrade'][$level][$category]['nlovk'] + $upgrr['nparam'],
						'ninta' 		=> $_chaos_settings['upgrade'][$level][$category]['ninta'] + $upgrr['nparam'],
						'nvinos' 		=> $_chaos_settings['upgrade'][$level][$category]['nvinos'] + $upgrr['nparam'],
						'ndubina'		=> $deft + $upgrr['nparam'],
						'ntopor'		=> $deft + $upgrr['nparam'],
						'nmech'			=> $deft + $upgrr['nparam'],
						'minu'			=> $upgrr['udar'] + $_chaos_settings['upgrade'][$level][$category]['minu'],
						'maxu'			=> $upgrr['udar'] + $_chaos_settings['upgrade'][$level][$category]['maxu'],
					], $_placeholder_item);
				}
			}
		}

		return $_items_return;
	}
}
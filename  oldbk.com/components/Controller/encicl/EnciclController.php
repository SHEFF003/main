<?php
/**
 * Created by PhpStorm.
 * User: me
 * Date: 13.12.16
 * Time: 20:45
 */

namespace components\Controller\encicl;


use components\Component\Slim\Slim;
use components\Controller\_base\BaseEnciclController;
use components\Helper\Str;
use components\Model\LibraryPage;
use components\Model\LibraryPocket;
use components\Model\Clan;
use components\Model\User;
use components\Object\Item;

class EnciclController extends BaseEnciclController
{
    protected $page_id;

    /**
     * EnciclController constructor.
     * @param Slim $container
     * @param $action
     * @param null $page
     */
    public function __construct(Slim $container, $action, $page = null)
    {
        $this->page_id = $page;
        if ($action == "clan") {
            $clanName = $container->request->get('clan', "indexclan");
            $this->page_id = $clanName;
        }

        parent::__construct($container, $action);
    }

    /**
     * @param $action
     * @return bool
     */
    protected function beforeAction($action)
    {
        $this->loadCssAndScripts();
        return parent::beforeAction($action); //TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function indexAction()
    {
        $Page = LibraryPage::find('dir = ?', array($this->page_id))->asArray();
        if (!$Page) {
            return $this->render('pagenotfound', []);
        }

        $Items = [];
        $CI = $this;
        $Page['body'] = preg_replace_callback('~\%LIST([\d]{1,})\%~iU',
            function ($m) use (&$CI) {
                if (isset($m[1])) {
                    $pocket = new LibraryPocket;
                    $list = $pocket->getPocketItems($m[1]);
                    if (count($list)) {
                        $Items = [];
                        foreach ($list as $k => $v) {
                            $Item = new Item;
                            $Item->fillData($v);
                            $Items[] = $Item;
                        }
                        $ret = $CI->renderPartial(
                            'itemlist', array(
                            'Items' => $Items,
                            'CI' => $CI,
                        ), true
                        );
                        return $ret;
                    }
                }
                return $m[0];
            }
            , $Page['body']
        );

        //удаляем стили у таблиц и картинок контента для респонсивного отображения
        $dom = new \DOMDocument();
        $dom->strictErrorChecking = false;
        libxml_use_internal_errors(true);
        $dom->loadHTML($Page['body']);
        libxml_use_internal_errors(false);

        $xpath = new \DOMXPath($dom);
        $nodes = $xpath->query("//table[not(@class)] | //img[not(@class)]");

        foreach ($nodes as $node) {

            if($node->nodeName === 'img') {
                $node->setAttribute('class', 'img-fluid mx-auto');
            }

            if($node->nodeName === 'table') {
                $node->removeAttribute('style');
            }

        }

        $body = $dom->getElementsByTagName('body');

        $Page['body'] = $body && $body->length > 0
            ? utf8_decode($dom->saveHTML($body->item(0)))
            : $Page['body'];
        $body = null;

        $this->title = $Page['page_title'] . ' ' . $this->title;

        $html = $this->render('page', array(
            'page' => $Page,
        ), true);

        $this->app->cache->set($this->getKeyCache(), $html, 10);
        return $html;
    }

    /**
     * @return string
     */
    public function clanAction()
    {
        $clanName = $this->app->request->get('clan', null);
        if ($clanName == "Paladins") $clanName = "pal";
        if (empty($clanName)) {
            // render all list
            $this->title = "Список кланов | " . $this->title;
            $this->description = "Список кланов";

            $Clan = new Clan;

            $html = $this->render('clanlist', array(
                'clans' => $Clan->getClansList(),
            ), true);

            $this->app->cache->set($this->getKeyCache(), $html, 10);

            return $html;
        } else {
            // render one clan
            $Clan1 = Clan::find('short = ?', [$clanName])->asArray();
            if (!$Clan1) {
                return $this->render('clannotfound');
            }

            if ($Clan1['base_klan'] > 0) {
                $Clan2 = Clan::find('id = ? and time_to_del = 0', [$Clan1['base_klan']])->asArray();
            } elseif ($Clan1['rekrut_klan'] > 0) {
                $Clan2 = Clan::find('id = ? and time_to_del = 0', [$Clan1['rekrut_klan']])->asArray();
            } else {
                $Clan2 = array();
            }

            $this->title = "Клан " . $Clan1['short'] . " | " . $this->title;
            $this->description = "Клан " . $Clan1['short'];

            $Users = User::findAll([
                'condition' => 'klan = ?',
                'order' => 'level desc',
            ], [$Clan1['short']])->asArray();

            $UsersList = [];

            foreach ($Users as $User) {
                if ($User['id'] == $Clan1['glava']) {
                    $UsersList[] = $User;
                }
            }

            foreach ($Users as $User) {
                if ($User['id'] != $Clan1['glava']) {
                    $UsersList[] = $User;
                }
            }

            if (str_contains($Clan1['homepage'], '.')) {
                $Clan1['homepage'] = starts_with($Clan1['homepage'], ['http'])
                    ? trim($Clan1['homepage'], '/')
                    : 'http://'.trim($Clan1['homepage'], '/');

                $Clan1['homepage'] = strtolower($Clan1['homepage']);
            } else {
                $Clan1['homepage'] = '';
            }


			$Clan = new Clan;
			$site = $Clan->getClanSite($Clan1['short']);
			if (!$site && $Clan2) $site = $Clan->getClanSite($Clan2['short']);

			$html = $this->render('clan', array(
				'clan1' => $Clan1,
				'clan2' => $Clan2,
				'users' => $UsersList,
				'site' => $site,
			),true);
			$this->app->cache->set($this->getKeyCache(), $html, 10);

            return $html;
        }
    }

    /**
     * @return string
     */
    protected function getKeyCache()
    {
        return sprintf('html_%s_%s_%s', $this->getControllerId(), $this->actionId, $this->page_id);
    }

}
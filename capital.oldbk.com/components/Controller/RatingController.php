<?php
namespace components\Controller;
use components\Component\Config;
use components\Component\Pool\item\BaseItem;
use components\Component\Pool\WrapperPool;
use \components\Controller\_base\MainController;
use components\Helper\Json;
use components\Helper\rating\AbstractRating;
use components\models\CastlesOsada;
use components\models\Chat;
use components\models\dailyFree\DailyFreeFontan;
use components\models\Effect;
use components\models\EventRating;
use components\models\LabirintVar;
use components\models\LordVar;
use components\models\MapVar;
use components\models\NewDelo;
use components\models\pool\PoolAssign;
use components\models\Ristalka;
use components\models\RuinesVar;
use components\models\User;
use components\models\UserEventRating;
use components\Component\Db\CapitalDb;

/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 18.11.2015
 *
 */
class RatingController extends MainController
{
	public function beforeAction($action)
	{
		header('Access-Control-Allow-Origin: http://chat.oldbk.com');
		header("Access-Control-Allow-Credentials: true");
		header("Access-Control-Allow-Methods: POST, GET");
		header("Access-Control-Allow-Headers: Origin");
		header('P3P: CP="CAO PSA OUR"'); // Makes IE to support cookies

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	public function indexAction()
	{
		return $this->counterIndex();
		return;
		if($this->app->webUser->isAdmin()) {
			$this->counterIndex();
			return;
		}

		$items = [];
		/** @var EventRating[] $Ratings */
		$Ratings = EventRating::get()->keyBy('id');

		$ActiveRatings = UserEventRating::where('user_id', '=', $this->app->webUser->getId())
			->where('is_closed', '=', 0)
			->where('is_reward', '=', 0)
			->orderBy('is_end')
			->get();
		foreach ($ActiveRatings as $ActiveRating) {
			$Rating = $Ratings[$ActiveRating->rating_id];

			if(!isset($items[$ActiveRating->rating_id])) {
				$items[$ActiveRating->rating_id] = [
					'rating' => $Rating,
					'items' => [],
				];
			}
			$items[$ActiveRating->rating_id]['items'][$ActiveRating->id] = $ActiveRating;

			if(isset($Ratings[$ActiveRating->rating_id])) {
				unset($Ratings[$ActiveRating->rating_id]);
			}
		}

		foreach ($Ratings as $Rating) {
			if(!$Rating->is_enabled) {
				continue;
			}
			$items[$Rating->id] = [
				'rating' => $Rating,
				'items' => [],
			];
		}

		$data = [
			'status' => 1,
			'html' => $this->renderPartial('list', [
				'items' => $items,
			], true),
		];

		if(isset($_GET['callback'])) {
			echo $_GET['callback'].'('.Json::encode($data).')';
		}
	}

	public function counterIndex()
	{
		$User = $this->app->webUser->getUser();

		$timers = [];

		//region одиночное ристалище
		$rista = [
			'title' 	=> 'Ристалище: одиночки',
			'link' 		=> 'http://oldbk.com/encicl/rastilka.html',
			'img' 		=> 'http://i.oldbk.com/i/city/sub/cap_rist_solo.png',
			'desc' 		=> 'Для посещения <strong>Одиночных сражений</strong> на Ристалище необходимо некоторое время, сократить которое можно при помощи «<a href="http://oldbk.com/encicl/?/mag1/scrol_rist20.html" target=_blank>Таймаут Ристалище -20%</a>»',
			'enable' 	=> true,
		];
		$Effect = Effect::where('owner', '=', $User->id)
			->where('type', '=', 8270)
			->first();
		if($Effect) {
			$rista = array_merge($rista, [
				'enable' 	=> false,
				'end_time' 	=> $Effect->time,
			]);
		}
		$timers[] = $rista;
		unset($rista);
		//endregion

		//region групповое ристалище
		$hlim = 10;
		$labp = $chaos = 0;
		$Ristalishe = Ristalka::where('owner', '=', $User->id)->first();
		if($Ristalishe) {
			$chaos = (int)$Ristalishe->chaos;
			$labp = (int)$Ristalishe->labp;
		}
		if($hlim > $chaos) {
			$Effect = Effect::where('owner', '=', $User->id)
				->where('type', '=', 9105)
				->first();
			if($Effect) {
				$hlim=(int)($hlim-($hlim*$Effect->add_info));
			}
		}
		$rista = [
			'title' 	=> 'Ристалище: группы',
			'link' 		=> 'http://oldbk.com/encicl/rastilka.html',
			'img' 		=> 'http://i.oldbk.com/i/city/sub/cap_rist_monstr.png',
			'desc' 		=> 'Для посещения <strong>Групповых сражений</strong> на Ристалище необходимо <strong>'.$hlim.' боев</strong>, сократить требования можно при помощи «<a href="http://oldbk.com/encicl/?/mag1/scrol_rist20.html" target=_blank>Таймаут Ристалище -20%</a>»',
			'enable' 	=> true,
		];
		if ($chaos < $hlim) {
			$rista = array_merge($rista, [
				'enable' 	=> false,
				'end_fight' => $hlim - $chaos
			]);
		}
		$timers[] = $rista;
		unset($rista);
		//endregion

		//region лаба
		if($User->lab == 0) {
			$regulyator = 72000;//20 часов
			$Labirint = LabirintVar::where('var', '=', 'labstarttime')
				->where('owner', '=', $User->id)->first();
			$Effect = Effect::where('type', '=', 9104)
				->where('owner', '=', $User->id)->first();
			if($Effect) {
				$regulyator -= (int)($regulyator * $Effect->add_info);
			}

			$LabEndTime = new \DateTime();
			$time_lan_ok = false;
			if ($Labirint->val > 0 && ($Labirint->val + $regulyator) > time()) {
				$H = floor(($regulyator - (time() - $Labirint->val)) / 60 / 60 );
				$M = round( (($regulyator - (time() -$Labirint->val)) / 60 ) - ($H*60) );

				//$LabEndTime->setTime($H, $M);
				$LabEndTime->modify('+'.$H.' hours')->modify('+'.$M.' minutes');
			} else {
				$time_lan_ok = true;
			}
			$lab_need_bat=10;
			if ($User->level >= 4 && $User->level <= 7 ) { $lab_need_bat=5; }
			$lab_battle_ok = false;
			$okneedbattle = 0;
			if ($chaos < $lab_need_bat && $labp==0) {

				$okneedbattle = ($lab_need_bat - $chaos);
			} else {
				$lab_battle_ok = true;
			}
			if ($okneedbattle < 0) { $okneedbattle = 0; }
			$rista = [
				'title' 	=> 'Лабиринт Хаоса',
				'link' 		=> 'http://oldbk.com/encicl/labchaos.html',
				'img' 		=> 'http://i.oldbk.com/i/city/sub/lab_png.png',
				'desc' 		=> 'Для посещения локации <strong>Лабиринт Хаоса</strong> необходимо <strong>'.$lab_need_bat.' боев</strong> и некоторое время, сократить требования можно при помощи «<a href="http://oldbk.com/encicl/?/mag1/scrol_lab20.html" target=_blank>Таймаут Лабиринта Хаоса -20%</a>»',
				'enable' 	=> true,
			];
			if($time_lan_ok === false || $lab_battle_ok === false) {
				$rista = array_merge($rista, [
					'enable' 	=> false,
					'end_fight' => $okneedbattle,
					'end_time' 	=> $LabEndTime->getTimestamp(),
				]);
			}
			$timers[] = $rista;
			unset($rista);
		}
		//endregion

		//region руины
		if($User->ruines == 0) {
			$rista = [
				'title' 	=> 'Руины Старого Замка',
				'link' 		=> 'http://oldbk.com/encicl/ruins.html',
				'img' 		=> 'http://i.oldbk.com/i/city/sub/ruins_png.png',
				'desc' 		=> 'Для посещения <strong>Руин Старого Замка</strong> необходимо некоторое время, сократить которое можно при помощи «<a href="http://oldbk.com/encicl/?/mag1/scrol_zam20.html" target=_blank>Таймаут Руины Старого Замка -20%</a>»',
				'enable' 	=> true,
			];

			$RuinesVar = RuinesVar::where('var', '=', 'cango')
				->where('val', '>', time())
				->where('owner', '=', $User->id)
				->first();
			if($RuinesVar) {
				$rista = array_merge($rista, [
					'enable' 	=> false,
					'end_time' 	=> $RuinesVar->val,
				]);
			}
			$timers[] = $rista;
			unset($rista);
		}
		//endregion

		//region maps
		$rista = [
			'title' 	=> 'Задания Загорода',
			'link' 		=> 'http://oldbk.com/encicl/park.html',
			'img' 		=> 'http://i.oldbk.com/i/city/sub/cap_gate.png',
			'desc' 		=> 'До появления нового задания в <strong>Загороде</strong> необходимо некоторое время, сократить которое можно при помощи «<a href="http://oldbk.com/encicl/?/mag1/scrol_zag20.html" target=_blank>Таймаут квесты в загороде -20%</a>»',
			'enable' 	=> true,
		];

		$MapVar = MapVar::where('var', '=', 'cango')
			->where('val', '>', time())
			->where('owner', '=', $User->id)
			->first();
		if($MapVar) {
			$rista = array_merge($rista, [
				'enable' 	=> false,
				'end_time' 	=> $MapVar->val,
			]);
		}
		$timers[] = $rista;
		unset($rista);
		//endregion

		//region lord
		$rista = [
			'title' 	=> 'Замок Лорда Разрушителя',
			'link' 		=> null,
			'img' 		=> 'http://i.oldbk.com/i/city/sub/lord_castle2.png',
			'desc' 		=> 'Для посещения <strong>Замка Лорда Разрушителя </strong> необходимо некоторое время. Используйте «<a href="https://oldbk.com/encicl/predmeti/propusk_lordraz5.html" target=_blank>Пропуск к Лорду Разрушителю</a>», чтобы убрать сократить время ожидания.',
			'enable' 	=> true,
		];
		$LordVar = LordVar::where('var', '=', 'cango')
			->where('val', '=', (new \DateTime())->setTime(0,0,0)->getTimestamp())
			->first();
		if($LordVar) {
			$rista = array_merge($rista, [
				'enable' 	=> false,
				'end_time' 	=> (new \DateTime())->setTime(23, 59, 59)->getTimestamp(),
			]);
		}
		$timers[] = $rista;
		unset($rista);
		//endregion


		//region fontan
		$rista = [
			'title' 	=> 'Фонтан Удачи',
			'link' 		=> null,
			'img' 		=> 'http://i.oldbk.com/i/city/sub/osen_fontan.png',
			'desc' 		=> 'Возможность испытать удачу, бросив монетку!',
			'enable' 	=> true,
		];
		$DailyFree = DailyFreeFontan::firstOrNew(['user_id' => $User->id]);
		$nextAddedTimestamp = $DailyFree->getNextAddedTimestamp();
		if($nextAddedTimestamp > 0 && $DailyFree->getAvailable() == 0) {
			$rista = array_merge($rista, [
				'enable' 	=> false,
				'end_time' 	=> $nextAddedTimestamp,
			]);
		}
		$timers[] = $rista;
		unset($rista);
		//endregion

		//region osada
		$osada = [
			'title' 	=> 'Осада замка',
			'link' 		=> 'https://oldbk.com/encicl/osadazamka.html',
			'img' 		=> 'http://i.oldbk.com/i/city/sub/icon_osadazamka.png',
			'desc' 		=> 'Прими участие в осаде замка, займи свое место в рейтинге и получи ценные призы!',
			'enable' 	=> true,
		];
		/** @var CastlesOsada $CastlesOsada */
		$CastlesOsada = CastlesOsada::where('id', '=', 999)->first();
		if($CastlesOsada->nextosada > time()) {
			$osada = array_merge($osada, [
				'enable' 	=> false,
				'end_time' 	=> $CastlesOsada->nextosada,
			]);
		}
		$timers[] = $osada;
		unset($osada);
		//endregion osada

		$data = [
			'status' => 1,
			'html' => $this->renderPartial('index', [
				'items' => $timers,
			], true),
		];

		if(isset($_GET['callback'])) {
			echo $_GET['callback'].'('.Json::encode($data).')';
			exit;
		}

		$this->renderJSON([
			'status' => 1,
			'html' => $this->renderPartial('counter', [
				'items' => $timers,
			], true),
		]);
	}

	public function ratingAction()
	{
		$current = time();
		/** @var CastlesOsada $Osada */
		$Osada = CastlesOsada::where('id', '=', 999)->first();

		$items = [];
		$ratings_exclude = [];
		/** @var UserEventRating[] $ActiveRatings */
		$ActiveRatings = UserEventRating::with('rating', 'rating.condition')
			->where('user_id', '=', $this->app->webUser->getId())
			->where('is_closed', '=', 0)
			->where('is_reward', '=', 0)
			->orderBy('is_end')
			->get();
		foreach ($ActiveRatings as $ActiveRating) {
			if($ActiveRating->is_end == 0) {
				$ratings_exclude[] = $ActiveRating->rating_id;
			}

			switch ($ActiveRating->rating->key) {
				case AbstractRating::KEY_OSADA:
					$ActiveRating->rating->isActive 	= $Osada->nextosada < $current &&  $current < $Osada->osadaend;
					$ActiveRating->rating->datestart 	= (new \DateTime())->setTimestamp($Osada->nextosada);
					$ActiveRating->rating->dateend 		= (new \DateTime())->setTimestamp($Osada->osadaend);
					break;
				default:
					$ActiveRating->rating->isActive 	= $ActiveRating->rating->isActive();
					$ActiveRating->rating->datestart 	= $ActiveRating->rating->getStartDatetime();
					$ActiveRating->rating->dateend 		= $ActiveRating->rating->getEndDatetime();
					break;
			}

			$items[] = $ActiveRating;
		}

		/** @var EventRating[] $Ratings */
		$Ratings = EventRating::with('condition')
			->when(!Config::admins(), function($query) {
				/** @var mixed $query */
				$query->where('is_enabled', '=', 1);
			})
			->whereNotIn('id', $ratings_exclude)
			->get();
		foreach ($Ratings as $key => $Rating) {
			switch ($Rating->key) {
				case AbstractRating::KEY_OSADA:
					$Rating->isActive 	= $Osada->nextosada < $current &&  $current < $Osada->osadaend;
					$Rating->datestart 	= (new \DateTime())->setTimestamp($Osada->nextosada);
					$Rating->dateend 	= (new \DateTime())->setTimestamp($Osada->osadaend);
					break;
				default:
					$Rating->isActive 	= $Rating->isActive();
					$Rating->datestart 	= $Rating->getStartDatetime();
					$Rating->dateend 	= $Rating->getEndDatetime();
					break;
			}
		}

		$data = [
			'status' => 1,
			'html' => $this->renderPartial('rating', [
				'Ratings' 	=> $Ratings,
				'items' 	=> $items,
			], true),
		];

		$this->renderJSON($data);
	}

	public function rewardAction()
	{
		$user_ratingId = isset($_POST['urid']) ? (int)$_POST['urid'] : 0;
		/** @var UserEventRating $UserRating */
		$UserRating = UserEventRating::where('id', '=', (int)$user_ratingId)
			->where('is_closed', '=', 0)
			->where('is_reward', '=', 0)
			->where('user_id', '=', $this->app->webUser->getId())
			->first();
		if(!$UserRating) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Рейтинг отсутствует!'
			]);
		}
		if(!$UserRating->is_end) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Рейтинг еще не закончен!'
			]);
		}
		/** @var EventRating $Rating */
		$Rating = EventRating::find($UserRating->rating_id);

		$position = $UserRating->getPosition();
		if($position === false || $position > 500) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Ваше место 500+, награда не предусмотрена'
			]);
		}

		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$Owner = User::find($UserRating->user_id);


			$callback = function($Assign) use ($position) {
				/** @var PoolAssign $Assign */

				$r = ($Assign->rating->min_position <= $position && $position <= $Assign->rating->max_position);

				return $r;

			};
			$callbackDelo = function ($data, $reward_type) use ($Rating) {
				$data = array_merge($data, [
					'target_login' 	=> 'Рейтинг',
					'add_info' 		=> $Rating->name,
				]);
				switch ($reward_type) {
					case BaseItem::ITEM_TYPE_ITEM:
						$data['type'] = NewDelo::TYPE_RATING_REWARD_ITEM;
						break;
					case BaseItem::ITEM_TYPE_REPA:
						$data['type'] = NewDelo::TYPE_RATING_REWARD_REP;
						break;
				}

				return $data;
			};
			$callbackItem = function ($item) {
				return $item;
			};

			//Begin trans
			$item_raw = '';
			$view_items = [];
			$Pool = new WrapperPool($Rating->id, 'rate', $callback);
			$Items = $Pool->getGiveItems();

			foreach ($Items as $Item) {
				$Item->give($Owner, $callbackDelo, $callbackItem);

				$item_raw .= $Item->getChatString();
				$view_items[] = $Item->getViewArray();

				$UserRating->is_reward = 1;
				if (!$UserRating->save()) {
					throw new \Exception();
				}
			}

			$message = sprintf('Внимание! Вы заняли %d место в рейтинге «<a href="%s" target="_blank">%s</a>». Ваша награда: %s', $position, $Rating->link, $Rating->name, trim($item_raw));
			$chat_id = Chat::addToChatSystem($message, $Owner);
			if(!$chat_id) {
				throw new \Exception();
			}

			$db->commit();

			$this->renderJSON([
				'status' => 1,
				'ratingId' => $Rating->id,
				'html' => $this->renderPartial('rating/reward', [
					'items' => $view_items,
				], true),
			]);

		} catch (\Exception $ex) {
			$db->rollBack();

			$this->app->logger->emergency((string)$ex);
		}

		$this->renderJSON([
			'status' => 0,
			'message' => 'Что-то пошло не так!'
		]);
	}
}
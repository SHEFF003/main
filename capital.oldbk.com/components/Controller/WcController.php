<?php
namespace components\Controller;
use components\Component\Pool\WrapperPool;
use components\Component\Security\TwoFA;
use components\Component\VarDumper;
use \components\Controller\_base\MainController;
use components\Helper\FileHelper;
use components\Helper\Json;
use components\Helper\ShopHelper;
use components\models\Chat;
use components\models\Inventory;
use components\models\NewDelo;
use components\models\WcEvent;
use components\models\WcEventBet;
use components\Component\Db\CapitalDb;
use components\models\WcEventItem;
use components\models\WcEventItemDetails;

/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 18.11.2015
 *
 */
class WcController extends MainController
{
	private $_horn_proto = [20180101, 20180102];

	public function beforeAction($action)
	{
		header('Access-Control-Allow-Origin: http://chat.oldbk.com');
		header("Access-Control-Allow-Credentials: true");
		header("Access-Control-Allow-Methods: POST, GET");
		header("Access-Control-Allow-Headers: Origin");
		header('P3P: CP="CAO PSA OUR"'); // Makes IE to support cookies

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	private $_tabs = [
		'group',
		'1_8'
	];
	public function indexAction()
	{
		$tab = isset($_GET['tab']) && in_array($_GET['tab'], $this->_tabs) ? $_GET['tab'] : 'group';

		$UserBets = WcEventBet::whereRaw('user_id = ?', [$this->app->webUser->getId()])->get()->keyBy('wc_event_id');

		$EventsGroup = [];
		/** @var WcEvent[] $Events_t */
		$Events_t = WcEvent::all();

		$isHorn = false;
		$horn_count = Inventory::whereRaw('owner = ?', [$this->app->webUser->getId()])
			->whereIn('prototype', $this->_horn_proto)->count();
		if($horn_count > 0) {
			$isHorn = true;
		}
		foreach ($Events_t as $_item) {
			switch (true) {
				case ($_item->id >= 111 && $_item->id <= 118):
					$key = '1_8';
					break;
				case ($_item->id >= 119 && $_item->id <= 122):
					$key = '1_4';
					break;
				case ($_item->id >= 123 && $_item->id <= 124):
					$key = '1_2';
					break;
				case ($_item->id == 125):
					$key = '3';
					break;
				case ($_item->id == 126):
					$key = '1';
					break;
				default:
					$key = 'group';
					break;
			}

			$EventsGroup[$key][] = $_item;
		}

		$data = [
			'status' => 1,
			'isHorn' => $isHorn,
			'html' => $this->renderPartial('list', [
				'EventsGroup' 	=> $EventsGroup,
				'UserBets' 		=> $UserBets,
				'isHorn' 		=> $isHorn,
				'tab'			=> $tab
			], true),
		];
		if(isset($_GET['callback'])) {
			echo $_GET['callback'].'('.Json::encode($data).')';
		}
	}

	public function betAction()
	{
		$event_id = isset($_POST['event_id']) ? (int)$_POST['event_id'] : 0;
		$bet = isset($_POST['bet']) ? (int)$_POST['bet'] : 0;

		$bet_types = WcEventBet::types();
		if(!in_array($bet, $bet_types)) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Тип ставки неопределен!'
			]);
		}
		/** @var WcEvent $Event */
		$Event = WcEvent::find($event_id);
		if(!$Event) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Событие отсутствует!'
			]);
		}
		if($Event->datetime < time()) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Событие уже началось, ставки не принимаются!'
			]);
		}

		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			/** @var Inventory $Horn */
			$Horn = Inventory::whereRaw('owner = ?', [$this->app->webUser->getId()])
				->whereIn('prototype', $this->_horn_proto)
				->orderBy('prototype', 'asc')
				->first();
			if(!$Horn) {
				$db->rollBack();
				$this->renderJSON([
					'status' => 0,
					'message' => 'У вас нет требуемого предмета!'
				]);
			}

			$isBet = WcEventBet::whereRaw('wc_event_id = ? and user_id = ?', [$Event->id, $this->app->webUser->getId()])
				->count();
			if($isBet) {
				$db->rollBack();
				$this->renderJSON([
					'status' => 0,
					'message' => 'Ставка на это событие уже сделана!'
				]);
			}

			$WcEventBet = new WcEventBet();
			$WcEventBet->wc_event_id = $Event->id;
			$WcEventBet->user_id = $this->app->webUser->getId();
			$WcEventBet->res = $bet;
			$WcEventBet->item_id = $Horn->id;
			$WcEventBet->item_proto_id = $Horn->prototype;
			if(!$WcEventBet->save()) {
				throw new \Exception();
			}
			$Horn->delete();


			$_data = [
				'owner' 				=> $this->user->id,
				'owner_login' 			=> $this->user->login,
				'owner_balans_do' 		=> $this->user->money,
				'owner_balans_posle' 	=> $this->user->money,
				'target' 				=> 0,
				'target_login' 			=> 'ЧМ18',
				'type' 					=> 1341,
				'sum_kr' 				=> 0,
				'item_count' 			=> 0,
				'item_name'				=> $Horn->name,
				'sdate' 				=> time(),
				'add_info' 				=> sprintf('%s на матч %s', $WcEventBet->getBetType(), $Event->getDescription()),//П1/Х/П2 на матч <название_матча>
			];
			if(!NewDelo::addNew($_data)) {
				throw new \Exception();
			}

			$db->commit();

			$horn_count = Inventory::whereRaw('owner = ?', [$this->app->webUser->getId()])
				->whereIn('prototype', $this->_horn_proto)->count();

			$this->renderJSON([
				'status' => 1,
				'html' => $this->renderPartial('block', [
					'Event' 	=> $Event,
					'Bet' 		=> $WcEventBet,
					'isHorn' 	=> $horn_count > 0,
				], true),
			]);

		} catch (\Exception $ex) {
			$db->rollBack();

			FileHelper::writeException($ex);
		}

		$this->renderJSON([
			'status' => 0,
			'message' => 'Что-то пошло не так!'
		]);
	}

	public function rewardAction()
	{
		$event_id = isset($_POST['event_id']) ? (int)$_POST['event_id'] : 0;
		/** @var WcEvent $Event */
		$Event = WcEvent::find($event_id);
		if(!$Event) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Событие отсутствует!'
			]);
		}
		if($Event->who_win == 0) {
			$this->renderJSON([
				'status' => 0,
				'message' => 'Событие еще не завершено!'
			]);
		}
		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			/** @var WcEventBet $Bet */
			$Bet = WcEventBet::whereRaw('wc_event_id = ? and user_id = ?', [$Event->id, $this->app->webUser->getId()])->first();
			if(!$Bet) {
				$db->rollBack();
				$this->renderJSON([
					'status' => 0,
					'message' => 'Вы не ставили на это событие!'
				]);
			}
			if(!$Bet->is_win) {
				$db->rollBack();
				$this->renderJSON([
					'status' => 0,
					'message' => 'Ставка не сыграла!',
					'bet' => $Bet->is_win,
				]);
			}
			$Bet->is_rewarded = 1;
			if(!$Bet->save()) {
				throw new \Exception();
			}

			$pocket_id = 60;
			if($Bet->item_proto_id == 20180102) {
				$pocket_id = 61;
			}
			$Pool = $this->getItemList($pocket_id, $Event);

			$Pool->giveAll($this->app->webUser->getUser());

			$item_raw = '';
			foreach ($Pool->getItemPrototypes() as $_items) {
				foreach ($_items as $shop_id => $_item) {
					$item_raw .= ShopHelper::buildLink($_item).' 1шт. ';
				}
			}
			$item_raw = trim($item_raw);
			$message = sprintf('Внимание! Ваша ставка на матч %s выиграла (счет %d:%d). Ваша награда: %s', $Event->getDescription(), $Event->team1_res, $Event->team2_res, $item_raw);
			if(Chat::addToChatSystem($message, $this->app->webUser->getUser()) === false) {
				throw new \Exception;
			}

			$db->commit();

			$horn_count = Inventory::whereRaw('owner = ?', [$this->app->webUser->getId()])
				->whereIn('prototype', $this->_horn_proto)->count();

			$this->renderJSON([
				'status' => 1,
				'html' => $this->renderPartial('block', [
					'Event' 	=> $Event,
					'Bet' 		=> $Bet,
					'isHorn' 	=> $horn_count > 0,
				], true),
			]);

		} catch (\Exception $ex) {
			$db->rollBack();
			FileHelper::writeException($ex, 'wc_reward', 'log');
		}

		$this->renderJSON([
			'status' => 0,
			'message' => 'Что-то пошло не так!'
		]);
	}

	/**
	 * @param $pocket_id
	 * @param WcEvent $Event
	 * @return WrapperPool
	 */
	private function getItemList($pocket_id, $Event)
	{
		$Items = WcEventItem::where('pocket_id', '=', $pocket_id)
			->get()->toArray();

		$item_list = [];
		foreach ($Items as $Item) {
			$item_list[$Item['id']] = $Item;
		}

		$ItemDetails = WcEventItemDetails::where('pocket_id', '=', $pocket_id)->get()->toArray();
		foreach ($ItemDetails as $details) {
			if(!isset($item_list[$details['item_id']])) {
				continue;
			}

			$item_list[$details['item_id']]['info'][$details['field']] = $details['value'];
		}

		$override_item = [
			'getfrom' => 301,
			'present' => 'Удача',
			'notsell' => 1,
		];
		$override_delo = [
			'target_login'          => 'ЧМ18',
			'type'                  => NewDelo::TYPE_WC_ITEM,
			'add_info'				=> $Event->getDescription(),
		];


		return new WrapperPool($item_list, $override_item, $override_delo);
	}
}
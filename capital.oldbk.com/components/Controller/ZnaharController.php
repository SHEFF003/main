<?php
namespace components\Controller;
use components\Component\Db\CapitalDb;
use components\Component\VarDumper;
use \components\Controller\_base\MainController;
use components\Helper\Exception\ToViewException;
use components\Helper\FileHelper;
use components\Helper\Logger;
use components\Helper\PrepareQuest;
use components\Helper\StatsHelper;
use components\Helper\StringHelper;
use components\Helper\TimeHelper;
use components\models\Bank;
use components\models\BankHistory;
use components\models\BeginersQuest;
use components\models\BeginersQuestStep;
use components\models\Chat;
use components\models\Effect;
use components\models\effect\AddZnaharStatEffect;
use components\models\effect\Element;
use components\models\effect\Travma;
use components\models\Inventory;
use components\models\magic\Ability;
use components\models\NewDelo;
use components\models\User;
use components\models\user\UserZnahar as UserZnaharAuth;
use components\models\UserBabil;
use components\models\UserBabilTime;
use components\models\UserBonus;
use components\models\UserZnahar;
use components\models\UserZnaharSfree;

/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 18.11.2015
 *
 */
class ZnaharController extends MainController
{
	/** @var UserZnaharAuth */
	protected $user;

	public function beforeAction($action)
	{
		$r = parent::beforeAction($action); // TODO: Change the autogenerated stub
		if($this->user->battle != 0)
			$this->redirect('/fbattle.php');

		if($this->user->room != 43)
			$this->redirect('/main.php');

		return $r;
	}

	protected function getUser()
	{
		$this->user = UserZnaharAuth::find($this->get('session')->get('uid'));
	}

	public function indexAction()
	{
		$this->app->clientScript
			->registerCssFile('/newstyle_loc.css')
			->registerCssFile('/i/style.css');

		$free_abil_drop = false;
		$need_money_all_masters = $need_money_all_stat = $drop_klass_have = $need_money_klass = 0;
		$need_money_stat = $this->user->getZnaharRatioStats();

		if($this->user->level > $this->app->dbConfig->znahar_free_max_level && !$this->app->dbConfig->isVolnaHaosa()) {
			$UserZnahar = UserZnahar::firstOrCreate(['owner' => $this->user->id])->toArray();
			if($UserZnahar['stat'] > 0) {
				$n = $this->user->getMoneyStatsForZnahar();
				$need_money_all_stat = ($n < 0) ? 0 : $n;
			}

			if($UserZnahar['masters'] > 0) {
				$n = $this->user->getMoneyMasterForZnahar();
				$need_money_all_masters = ($n < 0) ? 0 : $n;
			}

			$drop_klass_have = isset($UserZnahar['klass']) ? $UserZnahar['klass'] : 1;
			$need_money_klass = $this->app->dbConfig->znahar_class_drop_cost;
		}

		//users_babil_time
		$UserBabilTime = UserBabilTime::whereRaw('owner = ?', [$this->user->id])->first(['stime']);
		if(!$UserBabilTime || TimeHelper::isExpire($UserBabilTime['stime'], '+1 month') || $this->app->dbConfig->isVolnaHaosa()) {
			$free_abil_drop = true;
		}

		$UserZnaharSfree = UserZnaharSfree::firstOrCreate(['owner' => $this->user->id], ['last_use' => 0, 'owner' => $this->user->id, 'free_count' => 15]);
		$free_stats_have = $UserZnaharSfree['free_count'];

		$AllAbility = Ability::getAllAbilityByAlign($this->user->getAlignForAbility());

		$UserAbility = array();
		$_UserAbility = UserBabil::whereRaw('owner = ?', [$this->user->id])->get(['magic'])->toArray();
		foreach ($_UserAbility as $_ability) {
			$UserAbility[] = $_ability['magic'];
		}
		if($this->user->pasbaf > 0) {
			$UserAbility[] = $this->user->pasbaf;
		}

		$bank_ids = array();
		if($this->app->session->get('bank_auth') == null) {
			$bank_ids = Bank::whereRaw('owner = ?', [$this->user->id])->get(['id']);
		}

		$canAbility = array(
			Ability::ABILITY_PASSIVE    => $this->checkAbilityLimit(Ability::ABILITY_PASSIVE, $UserAbility),
			Ability::ABILITY_NO_FIGHT   => $this->checkAbilityLimit(Ability::ABILITY_NO_FIGHT, $UserAbility),
			Ability::ABILITY_FIGHT      => $this->checkAbilityLimit(Ability::ABILITY_FIGHT, $UserAbility),
			Ability::ABILITY_COLLECTIVE => $this->checkAbilityLimit(Ability::ABILITY_COLLECTIVE, $UserAbility),
		);

		//quest
		$quest_description = null;
		$UserQuestStep = BeginersQuestStep::whereRaw('owner = ? and step = ?', [$this->user->id, 22])->first(['id']);
		if($UserQuestStep) {
			$UserQuest = BeginersQuest::whereRaw('id = ? and step = ?', [1, 22])->first(['qstart']);
			if($UserQuest) {
				$quest_description = PrepareQuest::prepareDescription($UserQuest['qstart'], 22);
			}
		}

		$travma_list = Travma::getEffects($this->user->id);

		$this->render('index', array(
			'user'                      => $this->user,
			'free_stats_have'           => $free_stats_have,
			'need_money_stat'           => $need_money_stat,
			'need_money_all_stat'       => $need_money_all_stat,
			'need_money_all_masters'    => $need_money_all_masters,
			'free_abil_drop'            => $free_abil_drop,
			'allAbility'                => $AllAbility,
			'userAbility'               => $UserAbility,
			'isDressed'                 => Inventory::isDressed($this->user->id),
			'travma'                    => isset($travma_list[0]) ? $travma_list[0] : false,
			'isBonus'                   => UserBonus::isHave($this->user->id),
			'bank_ids'                  => $bank_ids,
			'canAbility'                => $canAbility,
			'quest_description'         => $quest_description,
			'drop_klass_have'			=> $drop_klass_have,
			'need_money_klass'          => $need_money_klass,
			'isHaveZnaharStats'			=> AddZnaharStatEffect::isHave($this->user->id),
		));
	}

	public function undressAction()
	{
		if(!Inventory::isDressed($this->user->id)) {
			$this->app->flash('warning', 'На вас нет вещей');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}
		$db = CapitalDb::connection();
		$db->beginTransaction();

		try {
			User::whereRaw('id = ?', [$this->user->id])->lockForUpdate()->first();
			Inventory::undressAll($this->user);

			$db->commit();
		} catch (\Exception $ex) {
			$db->rollBack();
			FileHelper::writeException($ex, 'znahar');
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function delbonusAction()
	{
		UserBonus::whereRaw('owner = ?', [$this->user->id])->delete();

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function dropabilityAction()
	{
		$UserAbility = array();
		$_UserAbility = UserBabil::whereRaw('owner = ?', [$this->user->id])->get(['magic'])->toArray();
		foreach ($_UserAbility as $_ability) {
			$UserAbility[] = $_ability['magic'];
		}
		if($this->user->pasbaf > 0) {
			$UserAbility[] = $this->user->pasbaf;
		}
		if(count($UserAbility) == 0) {
			$this->app->flash('warning', 'Вам нечего сбрасывать');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$free_abil_drop = false;
		$UserBabilTime = UserBabilTime::whereRaw('owner = ?', [$this->user->id])->first(['stime']);
		if(!$UserBabilTime || TimeHelper::isExpire($UserBabilTime['stime'], '+1 month') || $this->app->dbConfig->isVolnaHaosa()) {
			$free_abil_drop = true;
		}
		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$drop_cost = $this->app->dbConfig->znahar_ability_drop_cost;
			if(!$free_abil_drop) {
				if($this->user->money < $drop_cost) {
					throw new ToViewException('Недостаточно кредитов для сброса абилити!');
				}

				if($this->user->money >= $drop_cost) {
					$_data = array(
						'owner' => $this->user->id,
						'owner_login' => $this->user->login,
						'owner_balans_do' => $this->user->money,
						'owner_balans_posle' => $this->user->money - $drop_cost,
						'target' => 0,
						'target_login' => 'Знахарь',
						'type' => 322,
						'sum_kr' => $drop_cost,
						'item_count' => 0,
						'sdate' => time(),
					);
					if(!NewDelo::addNew($_data)) {
						throw new \Exception();
					}

					//take pay for drop ability
					$this->user->money -= $drop_cost;
				} else {
					throw new ToViewException('Бесплатно можно сбрасывать только 1 раз в 30 дней!');
				}
			}

			$this->user->pasbaf = 0;
			if(!$this->user->save()) {
				throw new ToViewException('Неудалось платно сбросить абилити!');
			}

			//Update last ability drop
			UserBabilTime::updateOrCreate(['owner' => $this->user->id], ['stime' => (new \DateTime())->getTimestamp()]);
			UserBabil::whereRaw('owner = ?', [$this->user->id])->delete();

			$db->commit();

			$this->app->flash('success', 'Абилити удачно сброшены');
		} catch (\Exception $ex) {
			$db->rollBack();
			VarDumper::d($ex->getMessage(), false);
			VarDumper::d($ex->getTraceAsString());
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index', 'open' => 'ability')));
	}

	public function bankAction()
	{
		if($this->app->session->get('bank_auth')) {
			$this->app->flash('error', 'Вы уже авторизованы в банке');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$bank_id = $this->app->request->post('number');
		$password = $this->app->request->post('password');
		if($bank_id === null || $password === 'null') {
			$this->app->flash('error', 'Ошибка входа');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}
		$Bank = Bank::login($this->user->id, $bank_id, $password);
		if(!$Bank) {
			$this->app->flash('error', 'Ошибка входа');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$this->app->session->set('bank_auth', $Bank['id']);

		$this->app->flash('success', 'Вы успешно авторизовались в банке');
		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function banklogoutAction()
	{
		$this->app->session->delete('bank_auth');
		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function passiveAction()
	{
		if($this->user->level < $this->app->dbConfig->znahar_min_ability) {
			$this->app->flash('error', 'Еще рано!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$ability_id = $this->app->request->get('ability');
		$align = $this->user->getAlignForAbility();
		if(!Ability::hasAbility($align, Ability::ABILITY_PASSIVE, $ability_id)) {
			$this->app->flash('error', 'Такой абилити не найдено!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}
		if($this->user->pasbaf > 0) {
			$this->app->flash('error', 'Можно установить только 1 абилити данного типа!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$this->user->pasbaf = $ability_id;
		if(!$this->user->save()) {
			$this->app->flash('error', 'Не удалось установить абилити!');
		} else {
			$this->app->flash('success', 'Абилити установлено!');
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index', 'open' => 'ability')));
	}

	public function nofightAction()
	{
		if($this->user->level < $this->app->dbConfig->znahar_min_ability) {
			$this->app->flash('error', 'Еще рано!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$ability_id = $this->app->request->get('ability');
		$align = $this->user->getAlignForAbility();
		if(!Ability::hasAbility($align, Ability::ABILITY_NO_FIGHT, $ability_id)) {
			$this->app->flash('error', 'Такой абилити не найдено!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$UserAbility = array();
		$_UserAbility = UserBabil::whereRaw('owner = ?', [$this->user->id])->get(['magic'])->toArray();
		foreach ($_UserAbility as $_ability) {
			$UserAbility[] = $_ability['magic'];
		}

		if(in_array($ability_id, $UserAbility)) {
			$this->app->flash('error', 'Данное абилити уже установленно!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if(!$this->checkAbilityLimit(Ability::ABILITY_NO_FIGHT, $UserAbility)) {
			$this->app->flash('error', sprintf('Можно установить только %d абилити данного типа!', Ability::getAbilityLimit(Ability::ABILITY_NO_FIGHT)));
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$data = array(
			'owner'     => $this->user->id,
			'magic'     => $ability_id,
			'btype'     => 0,
			'dur'       => 0,
			'maxdur'    => 0,
		);
		if(!UserBabil::insert($data)) {
			$this->app->flash('error', 'Не удалось установить абилити!');
		} else {
			$this->app->flash('success', 'Абилити установлено!');
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index', 'open' => 'ability')));
	}

	public function fightAction()
	{
		if($this->user->level < $this->app->dbConfig->znahar_min_ability) {
			$this->app->flash('error', 'Еще рано!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$ability_id = $this->app->request->get('ability');
		$align = $this->user->getAlignForAbility();
		if(!Ability::hasAbility($align, Ability::ABILITY_FIGHT, $ability_id)) {
			$this->app->flash('error', 'Такой абилити не найдено!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$UserAbility = array();
		$_UserAbility = UserBabil::whereRaw('owner = ?', [$this->user->id])->get(['magic'])->toArray();
		foreach ($_UserAbility as $_ability) {
			$UserAbility[] = $_ability['magic'];
		}

		if(in_array($ability_id, $UserAbility)) {
			$this->app->flash('error', 'Данное абилити уже установленно!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if(!$this->checkAbilityLimit(Ability::ABILITY_FIGHT, $UserAbility)) {
			$this->app->flash('error', sprintf('Можно установить только %d абилити данного типа!', Ability::getAbilityLimit(Ability::ABILITY_FIGHT)));
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$data = array(
			'owner'     => $this->user->id,
			'magic'     => $ability_id,
			'btype'     => 1,
			'dur'       => 0,
			'maxdur'    => Ability::getMaxUdar($ability_id),
		);
		if(!UserBabil::insert($data)) {
			$this->app->flash('error', 'Не удалось установить абилити!');
		} else {
			$this->app->flash('success', 'Абилити установлено!');
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index', 'open' => 'ability')));
	}

	public function collectiveAction()
	{
		if($this->user->level < $this->app->dbConfig->znahar_min_ability) {
			$this->app->flash('error', 'Еще рано!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$ability_id = $this->app->request->get('ability');
		$align = $this->user->getAlignForAbility();
		if(!Ability::hasAbility($align, Ability::ABILITY_COLLECTIVE, $ability_id)) {
			$this->app->flash('error', 'Такой абилити не найдено!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$UserAbility = array();
		$_UserAbility = UserBabil::whereRaw('owner = ?', [$this->user->id])->get(['magic'])->toArray();
		foreach ($_UserAbility as $_ability) {
			$UserAbility[] = $_ability['magic'];
		}

		if(in_array($ability_id, $UserAbility)) {
			$this->app->flash('error', 'Данное абилити уже установленно!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if(!$this->checkAbilityLimit(Ability::ABILITY_COLLECTIVE, $UserAbility)) {
			$this->app->flash('error', sprintf('Можно установить только %d абилити данного типа!', Ability::getAbilityLimit(Ability::ABILITY_COLLECTIVE)));
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$data = array(
			'owner'     => $this->user->id,
			'magic'     => $ability_id,
			'btype'     => 1,
			'dur'       => 0,
			'maxdur'    => Ability::getMaxUdar($ability_id),
		);
		if(!UserBabil::insert($data)) {
			$this->app->flash('error', 'Не удалось установить абилити!');
		} else {
			$this->app->flash('success', 'Абилити установлено!');
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index', 'open' => 'ability')));
	}

	public function magicAction()
	{
		if($this->user->level < $this->app->dbConfig->znahar_min_magic) {
			$this->app->flash('error', 'Еще рано!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if($this->user->smagic > 0) {
			$this->app->flash('error', 'У вас уже выбрана основная магия стихий');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$magic = $this->app->request->get('id');
		if(!in_array($magic, User::getAllMagicStih())) {
			$this->app->flash('error', 'Стихия не найдена!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		try {
			$_data = [
				'smagic' => $magic
			];
			if(!User::whereRaw('id = ? and login = ?', [$this->user->id, $this->user->login])->update($_data)) {
				throw new \Exception();
			}

			$message = sprintf('Выбрана основная магия - %s', Element::getTitle($magic));
			$this->app->flash('success', $message);
		} catch (\Exception $ex) {
			Logger::write($ex);
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function buyelementAction()
	{
		if($this->user->level < $this->app->dbConfig->znahar_min_ability) {
			$this->app->flash('error', 'Еще рано!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if(empty($this->user->bank)) {
			$this->app->flash('error', 'Для добавления магии Вам необходимо войти в свой банковский счет!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$day = $this->app->request->get('day');
		$element = $this->app->request->get('element');
		if(!Element::checkDay($day) || !Element::checkTypes($element)) {
			$this->app->flash('error', 'Стихия не найдена!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$cost = Element::getPrice($day);
		if($this->user->bank['ekr'] < $cost) {
			$this->app->flash('error', 'Для добавления магии у Вас недостаточно средств!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$_data = array(
				'owner' => $this->user->id,
				'owner_login' => $this->user->login,
				'owner_balans_do' => $this->user->bank['ekr'],
				'owner_balans_posle' => $this->user->bank['ekr'] - $cost,
				'target' => 0,
				'target_login' => 'Знахарь',
				'type' => 323,
				'sum_rep' => 0,
				'sum_ekr' => $cost,
				'bank_id' => $this->user->bank['id'],
				'add_info' => sprintf('Баланс до: %s екр. после %s екр.', $this->user->bank['ekr'], $this->user->bank['ekr'] - $cost),
				'sdate' => time(),
			);
			if(!NewDelo::addNew($_data)) {
				throw new \Exception();
			}

			$data = array('ekr' => $this->user->bank['ekr'] - $cost);
			if(!Bank::whereRaw('owner = ? and id = ?', [$this->user->id, $this->user->bank['id']])->update($data)) {
				throw new \Exception();
			}

			$time = new \DateTime();
			$data = array(
				'date' => $time->getTimestamp(),
				'bankid' => $this->user->bank['id'],
				'text' => sprintf(
					'Добавление магии стихий у Знахаря <b>%s екр.</b>, комиссия <b>0 кр.</b> <i>(Итого: %s кр., %s екр.)</i>',
					$cost, $this->user->bank['cr'], $this->user->bank['ekr'] - $cost
				),
			);
			if(!BankHistory::insert($data)) {
				throw new \Exception();
			}

			$types = Element::getTypes();

			$time->modify('+ '.$day.' days');
			$Effect = Element::whereRaw('owner = ? and type = ?', [$this->user->id, $element])->first();
			if(!$Effect) {
				$Effect = new Element();
			}
			$Effect->type = $types[$element];
			$Effect->name = Element::getTitle2($element);
			$Effect->time = $time->getTimestamp();
			$Effect->owner = $this->user->id;
			if($Effect->id) {
				$message = 'Эффект прошлой дополнительной стихи был обновлен!';
			} else {
				$message = 'Эффект прошлой дополнительной стихи был удален!';
			}
			if(!$Effect->save()) {
				throw new \Exception();
			}

			unset($types[$element]);
			$db->commit();

			$message2 = sprintf('Вы добавили "%s" на %d %s', Element::getTitle2($element), $day, StringHelper::dayEnding($day));
			$this->app->flash('success', $message.'<br>'.$message2);
		} catch (\Exception $ex) {
			$db->rollBack();
			VarDumper::d($ex->getMessage(), false);
			VarDumper::d($ex->getTraceAsString());
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function moveAction()
	{
		if(Inventory::isDressed($this->user->id)) {
			$this->app->flash('error', 'Для начала нужно раздеться');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$from = (int)$this->app->request->post('from', 0);
		$target = (int)$this->app->request->post('target', 0);
		if(!$from || !$target || !StatsHelper::checkStat($from) || !StatsHelper::checkStat($from)) {
			$this->app->flash('error', 'Не удалось!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if($from == $target) {
			$this->app->flash('error', 'Перераспределить стат можно только в другой!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if($this->user->checkMinStat($from)) {
			$this->app->flash('error', 'Невозможно перераспределить статы ниже минимального уровня.');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if(!$this->user->canMoveTo($target)) {
			$this->app->flash('error', 'Недостаточный уровень для перераспределения.');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		/** @var UserZnaharSfree $UserZnaharSfree */
		$UserZnaharSfree = UserZnaharSfree::firstOrCreate(['owner' => $this->user->id], ['last_use' => 0, 'owner' => $this->user->id, 'free_count' => 15]);
		$free_stats_have = $UserZnaharSfree->free_count;

		$need_money = $this->user->getCost($target);
		if($this->user->level <= $this->app->dbConfig->znahar_free_max_level || $free_stats_have > 0 || $this->app->dbConfig->isVolnaHaosa()) {
			$need_money = 0;
		}

		if($need_money > 0 && $need_money > $this->user->money) {
			$this->app->flash('error', 'Недостаточно кредитов для оплаты!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			if($this->user->level > $this->app->dbConfig->znahar_free_max_level && !$this->app->dbConfig->isVolnaHaosa() && $free_stats_have > 0) {
				$free_stats_have -= 1;
				$_time = new \DateTime();
				//take from free stats
				$UserZnaharSfree->last_use = $_time->getTimestamp();
				$UserZnaharSfree->free_count = $free_stats_have;
				$UserZnaharSfree->save();
			}

			$_data = array(
				'owner' => $this->user->id,
				'owner_login' => $this->user->login,
				'owner_balans_do' => $this->user->money,
				'owner_balans_posle' => $this->user->money - $need_money,
				'target' => 0,
				'target_login' => 'Знахарь',
				'type' => 170,
				'sum_kr' => $need_money,
				'item_count' => 0,
				'sdate' => time(),
			);
			$add_info = '';
			if($this->app->dbConfig->isVolnaHaosa()) {
				$add_info .= 'Волна хаоса. ';
			}
			$add_info .= sprintf('Осталось свободных перераспределений: %d (%s %s)',
				$free_stats_have, StatsHelper::getTitle($from), StatsHelper::getTitle($target));
			$_data['add_info'] = $add_info;

			if(!NewDelo::addNew($_data)) {
				throw new \Exception();
			}

			$this->user->money -= $need_money;
			$this->user
				->takeStat($from, 1)
				->addStat($target, 1)
				->clearMaxHp()
				->save();

			$db->commit();
			$message = sprintf('Перераспределение статов из "%s" в "%s" произведено успешно. Цена операции %d кр.',
				StatsHelper::getTitle($from), StatsHelper::getTitle($target), $need_money);

			$this->app->flash('success', $message);
		} catch (\Exception $ex) {
			$db->rollBack();
			Logger::write($ex);
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function dropstatAction()
	{
		if(Inventory::isDressed($this->user->id)) {
			$this->app->flash('error', 'Для начала нужно раздеться');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		if($this->user->stats > 0) {
			$this->app->flash('error', 'У вас есть нераспределенные статы!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		/** @var UserZnahar $UserZnahar */
		$UserZnahar = UserZnahar::firstOrCreate(['owner' => $this->user->id]);
		$need_money_all_stat = 0;
		if($this->user->level > $this->app->dbConfig->znahar_free_max_level && !$this->app->dbConfig->isVolnaHaosa()) {
			if($UserZnahar->stat > 0) {
				$n = $this->user->getMoneyStatsForZnahar();
				$need_money_all_stat = ($n < 0) ? 0 : $n;
			}
		}

		if($need_money_all_stat > $this->user->money) {
			$this->app->flash('error', 'Недостаточно кредитов для оплаты!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$User = $this->user->getEmptyStats($this->get('exp'));
		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$_data = array(
				'owner' => $this->user->id,
				'owner_login' => $this->user->login,
				'owner_balans_do' => $this->user->money,
				'owner_balans_posle' => $this->user->money - $need_money_all_stat,
				'target' => 0,
				'target_login' => 'Знахарь',
				'type' => 171,
				'sum_kr' => $need_money_all_stat,
				'item_count' => 0,
				'sdate' => time(),
			);
			$add_info = '';
			if($this->app->dbConfig->isVolnaHaosa()) {
				$add_info .= 'Волна хаоса.';
			}
			$_data['add_info'] = $add_info;
			if(!NewDelo::addNew($_data)) {
				throw new \Exception();
			}

			$User->money -= $need_money_all_stat;
			$User->save();
			$UserZnahar->stat = $UserZnahar->stat + 1;
			$UserZnahar->dropstat = date('Y-m-d H:i:s', time());
			$UserZnahar->save();

			$db->commit();

			$this->app->flash('success', 'Сброс статов произведен успешно.');
		} catch (\Exception $ex) {
			$db->rollBack();
			Logger::write($ex);
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function changeclassAction()
	{
		if(Inventory::isDressed($this->user->id)) {
			$this->app->flash('error', 'Для начала нужно раздеться');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}
		if($this->user->level < 8) {
			$this->app->flash('error', 'Классы доступны с 8го уровня!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		/** @var UserZnahar $UserZnahar */
		$UserZnahar = UserZnahar::firstOrCreate(['owner' => $this->user->id]);
		$need_money = 0;
		if(!$this->app->dbConfig->isVolnaHaosa() && $UserZnahar->klass == 0) {
			$need_money = $this->app->dbConfig->znahar_class_drop_cost;
		}

		if($need_money > $this->user->money) {
			$this->app->flash('error', 'Недостаточно кредитов для оплаты!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$klass = $this->app->request->get('klass');
		$user_class = $this->app->container->get('class_desc');
		if(!array_key_exists($klass, $user_class)) {
			$this->app->flash('error', 'Класс не найден!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$_data = [
				'owner' 				=> $this->user->id,
				'owner_login' 			=> $this->user->login,
				'owner_balans_do' 		=> $this->user->money,
				'owner_balans_posle' 	=> $this->user->money,
				'target' 				=> 0,
				'target_login' 			=> 'Знахарь',
				'type' 					=> 1711,
				'sum_kr' 				=> 0,
				'item_count' 			=> 0,
				'sdate' 				=> time(),
				'add_info' 				=> $user_class[$klass]['title'],
			];
			$add_info = '';
			if($this->app->dbConfig->isVolnaHaosa()) {
				$add_info .= 'Волна хаоса.';
			}
			$_data['add_info'] = $add_info;
			if(!NewDelo::addNew($_data)) {
				throw new \Exception();
			}

			$this->user->money -= $need_money;
			$_data = [
				'money' 	=> $this->user->money,
				'uclass' 	=> (int)$klass,
			];
			User::whereRaw('id = ?', [$this->user->id])->update($_data);

			$kalss = $UserZnahar['klass'] - 1;
			$UserZnahar->klass = $kalss > 0 ? $kalss : 0;
			$UserZnahar->dropklass = time();
			$UserZnahar->save();

			$db->commit();
			$this->app->flash('success', sprintf('Успешно установлен класс %s.', $user_class[$klass]['title']));
		} catch (\Exception $ex) {
			$db->rollBack();
			Logger::write($ex);
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function dropmasterAction()
	{
		if(Inventory::isDressed($this->user->id)) {
			$this->app->flash('error', 'Для начала нужно раздеться');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$User = $this->user;
		if(($User->noj + $User->mec + $User->topor + $User->dubina + $User->mfire + $User->mwater + $User->mearth
				+ $User->mair + $User->mdark + $User->mlight + $User->mgray) == 0) {
			$this->app->flash('error', 'У Вас нет распределённых умений!!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		/** @var UserZnahar $UserZnahar */
		$UserZnahar = UserZnahar::firstOrCreate(['owner' => $this->user->id]);
		$need_money_all_masters = 0;
		if($this->user->level > $this->app->dbConfig->znahar_free_max_level && !$this->app->dbConfig->isVolnaHaosa()) {
			if($UserZnahar->masters > 0) {
				$n = $this->user->getMoneyMasterForZnahar();
				$need_money_all_masters = ($n < 0) ? 0 : $n;
			}
		}

		if($need_money_all_masters > $this->user->money) {
			$this->app->flash('error', 'Недостаточно кредитов для оплаты!');
			$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
		}

		$User->getEmptyMasters($this->get('exp'));
		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$_data = array(
				'owner' => $this->user->id,
				'owner_login' => $this->user->login,
				'owner_balans_do' => $this->user->money,
				'owner_balans_posle' => $this->user->money - $need_money_all_masters,
				'target' => 0,
				'target_login' => 'Знахарь',
				'type' => 5010,
				'sum_kr' => $need_money_all_masters,
				'item_count' => 0,
				'sdate' => time(),
			);
			$add_info = '';
			if($this->app->dbConfig->isVolnaHaosa()) {
				$add_info .= 'Волна хаоса.';
			}
			$_data['add_info'] = $add_info;
			if(!NewDelo::addNew($_data)) {
				throw new \Exception();
			}

			$User->money -= $need_money_all_masters;
			$User->save();

			$UserZnahar->masters = $UserZnahar->masters + 1;
			$UserZnahar->dropmast = time();
			$UserZnahar->save();

			$db->commit();

			$this->app->flash('success', 'Все прошло удачно. Вы можете перераспределить умения.');
		} catch (\Exception $ex) {
			$db->rollBack();
			Logger::write($ex);
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	private function checkAbilityLimit($ability_type, $UserAbility)
	{
		$abilityList = Ability::getAbilityViewList($this->user->getAlignForAbility());
		if(!isset($abilityList[$ability_type]))
			return false;

		$count = 0;
		foreach ($abilityList[$ability_type] as $_ability_id) {
			if(in_array($_ability_id, $UserAbility)) {
				$count++;
			}
		}
		return Ability::checkLimit($ability_type, $count);
	}


	public function addbonusAction()
	{
		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$isHave = AddZnaharStatEffect::isHave($this->user->id);
			if($isHave) {
				throw new \Exception('У вас уже имеется данный бонус.', 1);
			}

			$time = (new \DateTime())->modify('+5 minute')->getTimestamp();

			if(!Travma::dontmove($this->user->id, $time)) {
				throw new \Exception();
			}

			if(!AddZnaharStatEffect::add($this->user, $time)) {
				throw new \Exception();
			}

			if(!$this->user->save()) {
				throw new \Exception();
			}

			Chat::addToChatSystem('<font color="red">Внимание!</font> Получен эффект <strong>«Дополнительные статы»</strong>', $this->user);

			$db->commit();

			$this->app->flash('success', 'Все прошло удачно.');
		} catch (\Exception $ex) {
			$db->rollBack();
			Logger::write($ex);

			if($ex->getCode() == 1) {
				$this->app->flash('error', $ex->getMessage());
			} else {
				$this->app->flash('error', 'Что-то пошло не так.');
			}
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function dropbonusAction()
	{
		$db = CapitalDb::connection();
		$db->beginTransaction();
		try {
			$isHave = AddZnaharStatEffect::isHave($this->user->id);
			if(!$isHave) {
				throw new \Exception('У вас нет этого бонуса.', 1);
			}


			if(!AddZnaharStatEffect::drop($this->user)) {
				throw new \Exception();
			}

			if(!$this->user->save()) {
				throw new \Exception();
			}

			Travma::removeDontmove($this->user->id);

			Chat::addToChatSystem('<font color="red">Внимание!</font> Снят эффект <strong>«Дополнительные статы»</strong>', $this->user);

			$db->commit();

			$this->redirect('/main.php?edit=1&razdel=0');
			} catch (\Exception $ex) {
			$db->rollBack();
			Logger::write($ex);

			if($ex->getCode() == 1) {
				$this->app->flash('error', $ex->getMessage());
			} else {
				$this->app->flash('error', 'Что-то пошло не так.');
			}
		}

		$this->redirect($this->app->urlFor('znahar', array('action' => 'index')));
	}

	public function exitAction()
	{
		$this->redirect('/main.php?edit=1&razdel=0');
	}
}
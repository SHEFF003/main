<?php
namespace components\Controller;
use components\Component\Db\CapitalDb as DB;
use \components\Controller\_base\MainController;
use components\models\dailyFree\DailyFreeFontan;
use components\models\effect\SilentForumEffect;
use components\models\Fontan;
use components\models\FontanLog;
use components\models\FontanSt;
use components\models\FontanWiners;
use components\models\NewDelo;
use components\models\Stol;
use components\models\User;
use components\models\user\UserZnahar as UserZnaharAuth;

/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 18.11.2015
 *
 */
class FontanController extends MainController
{
	/** @var UserZnaharAuth */
	protected $user;

	public function beforeAction($action)
	{
		$r = parent::beforeAction($action); // TODO: Change the autogenerated stub
		if($this->user->battle != 0)
			$this->redirect('/fbattle.php');

		if($this->user->room != 66)
			$this->redirect('/main.php');

		return $r;
	}

	public function indexAction()
	{
		$this->app->clientScript
			->registerCssFile('/assets/css/bootstrap.min.css')
			->registerCssFile('/newstyle_loc.css');
		$this->app->clientScript
			->registerCssFile('/assets/js/bootstrap.min.js');

		$win_sum = FontanWiners::sum('winner_count');

		$winnersMoney = FontanWiners::limit(20)
			->orderBy('id', 'desc')
			->get(['winner', 'winner_count'])->toArray();
		$winnerIds = [];
		foreach ($winnersMoney as $_w) {
			$winnerIds[] = $_w['winner'];
		}

		$Winners = User::whereIn('id', $winnerIds)->get()->keyBy('id');

		$comments = Fontan::limit(10)
			->offset((isset($_GET['page']) ? (int)$_GET['page'] : 0) * 10)
			->orderBy('id', 'desc')
			->get()->toArray();

		$comment_count = Fontan::count();

		$DailyFree = DailyFreeFontan::firstOrNew(['user_id' => $this->app->webUser->getId()]);

		$this->render('index', [
			'win_sum' 		=> $win_sum,
			'Winners' 		=> $Winners,
			'winnersMoney' 	=> $winnersMoney,
			'comments' 		=> $comments,
			'comment_count' => $comment_count,
			'DailyFree' 	=> $DailyFree,
		]);
	}

	public function deleteCommentAction()
	{
		if(!isset($_GET['id'])) {
			$this->redirect($this->app->request->getReferer());
		}
		$Comment = Fontan::where('id', '=', (int)$_GET['id'])
			->first();
		if(!$Comment || $Comment->del_id) {
			$this->redirect($this->app->request->getReferer());
		}

		if(!$this->app->webUser->checkAccess('can_forum_del')) {
			$this->redirect($this->app->request->getReferer());
		}

		$Comment->del_id = $this->app->webUser->getId();
		$Comment->del_login = $this->app->webUser->getLogin();
		$Comment->del_level = $this->app->webUser->getLevel();
		$Comment->del_align = $this->app->webUser->getAlign();
		$Comment->del_klan = $this->app->webUser->getKlan();
		$Comment->save();

		$this->redirect($this->app->request->getReferer());
	}

	public function restoreCommentAction()
	{
		if(!isset($_GET['id'])) {
			$this->redirect($this->app->request->getReferer());
		}
		$Comment = Fontan::where('id', '=', (int)$_GET['id'])
			->first();
		if(!$Comment || !$Comment->del_id) {
			$this->redirect($this->app->request->getReferer());
		}

		if(!$this->app->webUser->checkAccess('can_forum_restore')) {
			$this->redirect($this->app->request->getReferer());
		}

		$Comment->del_id = 0;
		$Comment->del_login = 0;
		$Comment->del_level = 0;
		$Comment->del_align = 0;
		$Comment->del_klan = 0;
		$Comment->save();

		$this->redirect($this->app->request->getReferer());
	}

	public function addCommentAction()
	{
		if(SilentForumEffect::isHave($this->app->webUser->getId())) {
			$this->app->flash('warning', 'На вас наложено заклятия форумного молчания.');
			$this->redirect($this->app->request->getReferer());
		}

		$text = isset($_POST['message']) ? $_POST['message'] : null;
		if(!$text) {
			$this->app->flash('error', 'Что-то пошло не так');
			$this->redirect($this->app->request->getReferer());
		}

		$Comment = new Fontan();
		$Comment->owner = $this->app->webUser->getId();
		$Comment->date = time();
		$Comment->text = strip_tags($text);
		$Comment->login = $this->app->webUser->getLogin();
		$Comment->align = $this->app->webUser->getAlign();
		$Comment->klan = $this->app->webUser->getKlan();
		$Comment->level = $this->app->webUser->getLevel();
		$Comment->save();

		$this->redirect($this->app->request->getReferer());
	}

	public function coinAction()
	{
		$db = DB::connection();
		$db->beginTransaction();
		try {
			$User = User::where('id', '=', $this->app->webUser->getId())->first();
			if($User->level < 4) {
				$this->app->flash('warning', 'Уровень маловат...');
				$this->redirect($this->app->request->getReferer());
			}

			if($User->money < 1) {
				$this->app->flash('warning', 'Уровень маловат...');
				$this->redirect($this->app->request->getReferer());
			}

			$DailyFree = DailyFreeFontan::firstOrNew(['user_id' => $User->id]);
			if($DailyFree->getAvailable() == 0 && \components\Component\Config::admins($User->id) !== true) {
				throw new \Exception('Дождитесь восстановления...');
			}

			$message = 'Вы бросили 1кр. в фонтан, но вам не повезло.';

			$DailyFree->uses -= 1;
			$DailyFree->used_total += 1;
			if(!$DailyFree->save()) {
				throw new \Exception('Что-то пошло не так...');
			}

			$FontanSt = new FontanSt();
			$FontanSt->owner = $User->id;
			if(!$FontanSt->save()) {
				throw new \Exception('Что-то пошло не так...');
			}

			$User->money -= 1;
			if(!$User->save()) {
				throw new \Exception('Что-то пошло не так...');
			}

			$Delo = NewDelo::where('type', '=', 103)
				->where('owner', '=', $User->id)
				->where('sdate', '>=', (new \DateTime())->setTime(0,0)->getTimestamp())
				->where('sdate', '<=', (new \DateTime())->setTime(23,59, 59)->getTimestamp())
				->orderBy('id', 'desc')
				->first();
			if(!$Delo) {
				$Delo = new NewDelo();
				$Delo->owner = $User->id;
				$Delo->owner_login = $User->login;
				$Delo->target = 0;
				$Delo->target_login = 'Фонтан Удачи';
				$Delo->type = 103;
				$Delo->sum_kr = 0;
			}

			$Delo->sum_kr += 1;
			$Delo->owner_balans_do = $User->money + 1;
			$Delo->owner_balans_posle = $User->money;
			if(!$Delo->save()) {
				throw new \Exception('Что-то пошло не так...');
			}

			$count = FontanSt::count();
			$prc = mt_rand(1,100);
			$give = $shans = 0;
			if($count >= 15 && $count <= 16) {
				$shans = 15;
				$give = mt_rand(3,15);
			} elseif($count >= 17 && $count <= 18) {
				$shans = 25;
				$give = mt_rand(5,18);
			} elseif($count >= 19 && $count <= 20) {
				$shans = 35;
				$give = mt_rand(7,20);
			} elseif($count >= 21 && $count <= 24) {
				$shans = 75;
				$give = mt_rand(9,45);
			} elseif($count >= 25) {
				$shans = 100;
				$give = mt_rand(14,60);
			}

			$_fontan_is_win = false;
			if($prc < $shans) {
				$_fontan_is_win = true;

				FontanSt::getQuery()->delete();
				$User->money += $give;
				if(!$User->save()) {
					throw new \Exception('Что-то пошло не так...');
				}

				$Delo = new NewDelo();
				$Delo->owner = $User->id;
				$Delo->owner_login = $User->login;
				$Delo->target = 0;
				$Delo->target_login = 'Фонтан Удачи';
				$Delo->type = 104;
				$Delo->sum_kr = $give;
				$Delo->owner_balans_do = $User->money - $give;
				$Delo->owner_balans_posle = $User->money;
				if(!$Delo->save()) {
					throw new \Exception('Что-то пошло не так...');
				}

				$FontanLog = new FontanLog();
				$FontanLog->get_money = $count;
				$FontanLog->give_money = $give;
				$FontanLog->save();

				$Winners = new FontanWiners();
				$Winners->winner = $User->id;
				$Winners->winner_count = $give;
				$Winners->winner_info = $User->login.','.$User->klan.','.$User->align.','.$User->level.','.$User->hidden;
				$Winners->save();

				$message = 'Вы бросили монетку в фонтан и выиграли '.$give.'кр.';
			}

			$db->commit();
			$this->app->flash('info', $message);

			try {
				$Quest = $this->app->quest
					->setUser($User)
					->get();
				$Checker = new \components\Component\Quests\check\CheckerEvent();
				$Checker->event_type = \components\Component\Quests\pocket\questTask\EventTask::EVENT_FONTAN;
				if(($Item = $Quest->isNeed($Checker)) !== false) {
					$Quest->taskUp($Item);
				}

			} catch (\Exception $ex) {
				$this->app->logger->addEmergency((string)$ex);
			}

			try {
				$FontanRating = new \components\Helper\rating\FontanRating();
				$FontanRating->value_add = $_fontan_is_win ? 5 : 1;

				$this->app->applyHook('event.rating', $User, $FontanRating);
			} catch (\Exception $ex) {
				$this->app->logger->addEmergency((string)$ex);
			}


		} catch (\Exception $ex) {
			$db->rollBack();

			if($ex->getCode() == 0) {
				$this->app->flash('error', $ex->getMessage());
			}
		}

		$this->redirect($this->app->request->getReferer());
	}

	public function fontanAction()
	{
		$Stol = Stol::where('stol', '=', 22)
			->where('owner', '=', $this->app->webUser->getId())
			->first();
		if($Stol) {
			$this->app->flash('warning', 'Вы уже пили из фонтана сегодня...');
			$this->redirect($this->app->request->getReferer());
		}

		$db = DB::connection();
		$db->beginTransaction();
		try {
			$User = User::where('id', '=', $this->app->webUser->getId())->first();
			$User->hp = $User->maxhp;
			if(!$User->save()) {
				throw new \Exception('Что-то пошло не так...');
			}

			$Stol = new Stol();
			$Stol->stol = 22;
			$Stol->count = 1;
			$Stol->owner = $User->id;
			if(!$Stol->save()) {
				throw new \Exception('Что-то пошло не так...');
			}

			$db->commit();

			$this->app->flash('success', 'Вы выпили воду из фонтана и пополнили свою жизнь');
		} catch (\Exception $ex) {
			$db->rollBack();

			if($ex->getCode() == 0) {
				$this->app->flash('error', $ex->getMessage());
			}
		}

		$this->redirect($this->app->request->getReferer());
	}

	public function exitAction()
	{
		$this->redirect('/main.php?edit=1&razdel=0');
	}
}
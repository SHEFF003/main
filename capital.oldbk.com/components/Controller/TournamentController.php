<?php
namespace components\Controller;
use components\Component\Config;
use components\Controller\_base\AdminController;
use components\Controller\_base\MainController;
use components\Helper\Exception\ExitTryException;
use components\Helper\LogHelper;
use components\Helper\map\HeroMapGenerator;
use components\Helper\map\items\iMapItem;
use components\Helper\map\items\MapUser;
use components\models\Battle;
use components\models\BattleDamExp;
use components\models\BattleVars;
use components\models\Chat;
use components\models\clanTournament\ClanTournament;
use components\models\clanTournament\ClanTournamentGroup;
use components\models\clanTournament\ClanTournamentMapItems;
use components\models\clanTournament\ClanTournamentRequest;
use components\models\clanTournament\ClanTournamentRequestUser;
use components\Component\Db\CapitalDb as DB;
use components\models\clanTournament\ClanTournamentSmoke;
use components\models\clanTournament\ClanTournamentUser;
use components\models\clanTournament\ClanTournamentUserItems;
use components\models\Effect;
use components\models\User;
use components\models\UserLocation;
use Slim\Exception\Stop;

/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 18.11.2015
 *
 */
class TournamentController extends MainController
{

	private $rooms = [
		401 => ['accept', 'index', 'exit', 'clear'],
		402 => ['move', 'tournament', 'attack', 'flag', 'help', 'remove']
	];

	public function beforeAction($action)
	{
		$r = parent::beforeAction($action); // TODO: Change the autogenerated stub
		if($this->user->battle != 0) {
			$this->redirect('/fbattle.php');
		}

		if(!isset($this->rooms[$this->user->room])) {
			$this->redirect('/main.php');
		}

		if(!in_array($action, $this->rooms[$this->user->room])) {
			$this->locationAction();
			return false;
		}

		return $r;
	}

	protected function redirect($link, $code = 301)
	{
		try {
			parent::redirect($link, $code); // TODO: Change the autogenerated stub
		} catch (Stop $ex) {

		}
	}

	public function removeAction()
	{

		if($this->user->room != 402) {
			$this->redirect($this->app->request->getReferer());
		}

		$this->user->room = 400;
		$this->user->save();

		$this->redirect($this->app->urlFor('street.clan', ['action' => 'index']));
	}

	public function clearAction()
	{
		\components\Component\RabbitMQ\Builder::setApp($this->app);

		$queue = \components\Component\RabbitMQ\Builder::queue('tournament','tournament-fight');
		$queue->emit([]);
	}

	public function locationAction()
	{
		switch ($this->user->room) {
			case 401:
				$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'index']));
				break;
			case 402:
				$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'tournament']));
				break;
		}

		$this->redirect('/main.php');
	}

	/**
	 * @throws \Exception
	 */
	public function indexAction()
	{
		$this->app->clientScript
			->registerCssFile('/assets/css/bootstrap.min.css')
			->registerCssFile('/newstyle_loc.css')
			->registerCssFile('/i/style.css');

		$canAccept = false;
		$rcount = ClanTournamentRequestUser::where('user_id', '=', $this->app->webUser->getId())
			->where('is_removed', '=', 0)
			->where('joined_at', '>=', (new \DateTime())->setTime(0,0,0)->getTimestamp())
			->where('joined_at', '<=', (new \DateTime())->setTime(23,59,59)->getTimestamp())
			->count();
		if($rcount == 0 || Config::isTester($this->app->webUser->getUser())) {
			$canAccept = true;
		}

		$user_id = $this->app->webUser->getId();
		$ClanTournamentRequest = ClanTournamentRequest::with(['user' => function($query) use ($user_id) {
				$query->where('user_id', '=', $user_id);
				$query->where('is_removed', '=', 0);
			}])
			->withCount('users')
			->where('is_end', '=', 0)
			->get();

		$this->render('index', [
			'requests' 	=> $ClanTournamentRequest,
			'canAccept' => $canAccept,
		]);
	}

	/**
	 *
	 */
	public function exitAction()
	{
		if($this->user->room != 401) {
			$this->redirect($this->app->request->getReferer());
		}

		$this->user->room = 400;
		$this->user->save();

		$this->redirect($this->app->urlFor('street.clan', ['action' => 'index']));
	}

	/**
	 * @throws \Exception
	 */
	public function acceptAction()
	{
		$tid = isset($_GET['tid']) ? $_GET['tid'] : 0;

		$db = DB::connection();
		$db->beginTransaction();
		try {
			$ClanTournamentRequest = ClanTournamentRequest::where('is_end', '=', 0)
				->where('id', '=', $tid)
				->first();
			if(!$ClanTournamentRequest) {
				throw new ExitTryException('Турнир не найден');
			}

			$canAccept = false;
			$rcount = ClanTournamentRequestUser::where('user_id', '=', $this->app->webUser->getId())
				->where('is_removed', '=', 0)
				->where('joined_at', '>=', (new \DateTime())->setTime(0,0,0)->getTimestamp())
				->where('joined_at', '<=', (new \DateTime())->setTime(23,59,59)->getTimestamp())
				->count();
			if($rcount == 0 || Config::isTester($this->app->webUser->getUser())) {
				$canAccept = true;
			}
			if(!$canAccept) {
				throw new ExitTryException('Сегодня вы уже учавствовали в турнире');
			}

			$checkRequest = ClanTournamentRequestUser::with('request')
				->whereHas('request', function($query) {
					$query->where('is_end', '=', 0);
				})
				->where('user_id', '=', $this->app->webUser->getId())
				->count();
			if($checkRequest) {
				throw new ExitTryException('Вы уже состоите в заявке');
			}

			$UserRequest = new ClanTournamentRequestUser();
			$UserRequest->request_id = $ClanTournamentRequest->id;
			$UserRequest->user_id = $this->app->webUser->getId();
			$UserRequest->clan = $this->app->webUser->getKlan();
			$UserRequest->joined_at = time();
			if(!$UserRequest->save()) {
				throw new ExitTryException('Что-то пошло не так, попробуйте позже');
			}

			$this->app->flash('success', 'Вы приняли заявку в турнире');

			$db->commit();
		} catch (ExitTryException $ex) {
			$this->app->flash('error', $ex->getMessage());
			$db->rollBack();
		} catch (\Exception $ex) {
			$this->app->logger->emergency($ex);
			$db->rollBack();
		}

		$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'index']));
	}

	/**
	 * @param $user_id
	 * @param $tournament_id
	 * @param $group_id
	 * @param $team_id
	 * @param ClanTournamentUser[] $TUsers
	 * @return HeroMapGenerator
	 * @throws \Exception
	 */
	private function getBuilder($user_id, $tournament_id, $group_id, $team_id, $TUsers)
	{
		/** @var ClanTournament $Tournament */
		$Tournament = ClanTournament::with([
			'mapItems' => function($query) use ($group_id) {
				/** @var ClanTournamentMapItems $query */
				$query->where('group_id', '=', $group_id)
					->where('is_removed', '=', 0);
			},
			'mapSmoke' => function($query) use ($group_id, $team_id) {
				/** @var ClanTournamentSmoke $query */
				$query->where('group_id', '=', $group_id)
					->where('team_id', '=', $team_id)
					->where('is_removed', '=', 1);
			},
		])
			->where('id', '=', $tournament_id)
			->where('is_end', '=', 0)
			->first();
		if(!$Tournament) {
			//турнир закончился, видимо
			throw new \Exception();
		}

		$items = [];
		foreach ($Tournament->mapItems as $mapItem) {
			$items[$mapItem->location_y][$mapItem->location_x]['items'][] = [
				'id'			=> $mapItem->id,
				'type' 			=> $mapItem->item_type,
				'team_id' 		=> $mapItem->owner_team_id,
				'user_id' 		=> $mapItem->user_id,
				'is_taken' 		=> $mapItem->is_taken,
			];
		}

		foreach ($TUsers as $_TUser) {
			$items[$_TUser->location_y][$_TUser->location_x]['items'][] = [
				'type' 			=> ClanTournamentMapItems::TYPE_USER,
				'team_id' 		=> $_TUser->team_id,
				'user_id'		=> $_TUser->user_id,
				'withFlag'		=> $_TUser->haveFlag()
			];
		}

		$opened = [];
		foreach ($Tournament->mapSmoke as $Smoke) {
			$opened[] = ['y' => $Smoke->location_y, 'x' => $Smoke->location_x];
		}

		$builder = HeroMapGenerator::populate($user_id, $team_id, $Tournament->width, $Tournament->height, $items, $opened, $Tournament->t_type);

		return $builder;
	}

	/**
	 * @throws \Exception
	 */
	public function tournamentAction()
	{
		$this->app->clientScript
			->registerCssFile('/assets/css/bootstrap.min.css')
			->registerCssFile('/newstyle_loc.css')
			->registerCssFile('/i/style.css')
			->registerJsFile('/assets/js/progressbar.js')
			->registerJsFile('/assets/js/sweetalert.min.js');

		$UserLocation = UserLocation::where('user_id', '=', $this->app->webUser->getId())
			->where('in_clan_tournament', '>', 0)
			->first();
		if(!$UserLocation) {
			throw new \Exception();
		}
		/** @var ClanTournamentGroup $Group */
		$Group = ClanTournamentGroup::with(['tournament', 'users' => function($query) {
					/** @var ClanTournamentUser $query */
					$query->where('is_died', '=', 0);
				},'users.user', 'users.tookItems', 'users.tookItems.mapItem'])
			->where('tournament_id', '=', $UserLocation->location_special_id)
			->where('id', '=', $UserLocation->location_special_id2)
			->whereHas('tournament', function($query) {
				/** @var ClanTournamentUser $query */
				$query->where('is_end', '=', 0);
			})
			->first();

		$TUser = null;
		$users = [
			1 => ['point' => 0, 'users' => []],
			2 => ['point' => 0, 'users' => []],
 		];
		foreach ($Group->users as $GUser) {
			if($GUser->user_id == $UserLocation->user_id && $GUser->is_died == 0) {
				$TUser = $GUser;
			}

			$point = $Group->team1_value;
			if($GUser->team_id == 2) {
				$point = $Group->team2_value;
			}

			$users[$GUser->team_id]['point'] = $point;
			$users[$GUser->team_id]['users'][$GUser->user_id] = $GUser;
		}
		if(!$TUser) {
			throw new \Exception();
		}

		$Builder = $this->getBuilder($TUser->user_id, $TUser->tournament_id, $TUser->group_id, $TUser->team_id, $Group->users);

		$isEnemy = $Builder->isEnemy($TUser->location_y, $TUser->location_x);
		$isFlag = $Builder->isFlag($TUser->location_y, $TUser->location_x);
		$isTeamUser = false;

		if($isFlag) {
			foreach ($TUser->tookItems as $TookItem) {
				if($TookItem->mapItem->item_type == ClanTournamentMapItems::TYPE_FLAG) {
					$isFlag = false;
					//если у перса есть флаг, нападать не может
					$isEnemy = false;
					break;
				}
			}
		}

		foreach ($Group->users as $GUser) {
			if($GUser->team_id == $TUser->team_id
				&& $GUser->can_moved_at > $TUser->tournament->ended_at
				&& $GUser->location_y == $TUser->location_y
				&& $GUser->location_x == $TUser->location_x
				&& $GUser->user_id != $TUser->user_id
			) {

				$isTeamUser = true;
				break;
			}
		}

		$this->render('tournament',[
			'builder' 		=> $Builder,
			'tUser' 		=> $TUser,
			'isEnemy' 		=> $isEnemy,
			'isFlag' 		=> $isFlag,
			'isTeamUser' 	=> $isTeamUser,
			'group'		 	=> $Group,
			'users'		 	=> $users,
		]);
	}

	/**
	 * @throws \Exception
	 */
	public function attackAction()
	{
		$db = DB::connection();
		$db->beginTransaction();
		try {
			/** @var User $User */
			$User = User::where('id', '=', $this->app->webUser->getId())->first();

			$UserLocation = UserLocation::where('user_id', '=', $this->app->webUser->getId())
				->where('in_clan_tournament', '>', 0)
				->first();
			if(!$UserLocation) {
				throw new \Exception();
			}
			/** @var ClanTournamentGroup $Group */
			$Group = ClanTournamentGroup::with(['users.user', 'tournament', 'users.tookItems', 'users.tookItems.mapItem'])
				->where('tournament_id', '=', $UserLocation->location_special_id)
				->where('id', '=', $UserLocation->location_special_id2)
				->whereHas('tournament', function($query) {
					/** @var ClanTournamentUser $query */
					$query->where('is_end', '=', 0);
				})
				->first();

			$TUser = null;
			foreach ($Group->users as $GUser) {
				if($GUser->user_id == $UserLocation->user_id && $GUser->is_died == 0) {
					$TUser = $GUser;
					break;
				}
			}
			if(!$TUser) {
				throw new \Exception();
			}

			$Builder = $this->getBuilder($TUser->user_id, $TUser->tournament_id, $TUser->group_id, $TUser->team_id, $Group->users);
			$items = $Builder->getEnemyUsers($TUser->location_y, $TUser->location_x);
			if(!$items) {
				throw new ExitTryException;
			}

			$enemy_id = $items[0]->getUserId();
			/** @var User $Enemy */
			$Enemy = User::where('id', '=', $enemy_id)
				->first();
			if(!$Enemy) {
				throw new ExitTryException;
			}
			$isNewFight = $Enemy->battle > 0 ? false : true;

			$this->prepareUserForFight($User);

			$_time = time();
			$battleDamExpArr = [];
			$battleVarsArr = [];
			if($isNewFight) { //стартуем новый бой
				$this->prepareUserForFight($Enemy);

				$Battle = new Battle();
				$Battle->coment = '<b>Бой в Клановом турнире</b>';
				$Battle->timeout = 1;
				$Battle->type = 66;
				$Battle->status = 0;
				$Battle->t1 = $User->id;
				$Battle->t2 = $Enemy->id;
				$Battle->to1 = $_time;
				$Battle->to2 = $_time;
				$Battle->blood = 0;
				$Battle->status_flag = 0;
				$Battle->t1hist = $User->logRaw();
				$Battle->t2hist = $Enemy->logRaw();
				if(!$Battle->save()) {
					throw new ExitTryException;
				}

				$battleDamExpArr[] = ['battle' => $Battle->id, 'owner' => $Enemy->id];
				$battleVarsArr[] = ['battle' => $Battle->id, 'owner' => $Enemy->id, 'update_time' => $_time, 'type' => 1];

				$User->battle = $Battle->id;
				$User->battle_t = 1;
				$User->zayavka = 0;

				$Enemy->battle = $Battle->id;
				$Enemy->battle_t = 2;
				$Enemy->zayavka = 0;
				if(!$Enemy->save()) {
					throw new ExitTryException;
				}

				$message = sprintf('<font color="red">Внимание!</font> на секторе %d:%d завязался бой', $TUser->location_y, $TUser->location_x);
				$this->messageToGroup($TUser->tournament_id, $TUser->group_id, $message);
			} else { //вмешиваем в текущий
				$Battle = Battle::where('id', '=', $Enemy->id)->first();
				if(!$Battle) {
					throw new ExitTryException;
				}

				$User->battle = $Battle->id;
				$User->zayavka = 0;
				$User->battle_t = ($Enemy->battle_t == 1) ? 2 : 1;

				$_fieldT = sprintf('t%d', $User->battle_t);
				$_fieldTHist = sprintf('t%dhist', $User->battle_t);

				$Battle->{$_fieldT} .= ';'.$User->id;
				$Battle->{$_fieldTHist} .= $User->logRaw();
				$Battle->to1 = $_time;
				$Battle->to2 = $_time;
				if(!$Battle->save()) {
					throw new ExitTryException;
				}
			}

			$battleDamExpArr[] = ['battle' => $Battle->id, 'owner' => $User->id];
			$battleVarsArr[] = ['battle' => $Battle->id, 'owner' => $User->id, 'update_time' => $_time, 'type' => 1];

			BattleDamExp::insertIgnore($battleDamExpArr);
			BattleVars::insertOnDuplicateKey($battleVarsArr);

			if(!$User->save()) {
				throw new ExitTryException;
			}

			$Log = new LogHelper($Battle->id);
			if($isNewFight) {
				$Log->startFight($User, $Enemy);
			} else {
				$Log->addUserToFight($User);
			}

			$db->commit();

			$this->redirect('/fbattle.php');
		} catch (ExitTryException $ex) {

		} catch (\Exception $ex) {
			$db->rollBack();
			$this->app->logger->emergency($ex);
		}

		$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'tournament']));
	}

	/**
	 * @throws \Exception
	 */
	public function helpAction()
	{
		$db = DB::connection();
		$db->beginTransaction();
		try {
			$UserLocation = UserLocation::where('user_id', '=', $this->app->webUser->getId())
				->where('in_clan_tournament', '>', 0)
				->first();
			if(!$UserLocation) {
				throw new \Exception();
			}
			/** @var ClanTournamentGroup $Group */
			$Group = ClanTournamentGroup::with(['users.user', 'tournament', 'users.tookItems', 'users.tookItems.mapItem'])
				->where('tournament_id', '=', $UserLocation->location_special_id)
				->where('id', '=', $UserLocation->location_special_id2)
				->whereHas('tournament', function($query) {
					/** @var ClanTournamentUser $query */
					$query->where('is_end', '=', 0);
				})
				->first();

			$TUser = null;
			foreach ($Group->users as $GUser) {
				if($GUser->user_id == $UserLocation->user_id && $GUser->is_died == 0) {
					$TUser = $GUser;
					break;
				}
			}
			if(!$TUser) {
				throw new \Exception();
			}

			$Builder = $this->getBuilder($TUser->user_id, $TUser->tournament_id, $TUser->group_id, $TUser->team_id, $Group->users);
			$items = $Builder->getTeamUsers($TUser->location_y, $TUser->location_x);
			if(!$items) {
				throw new ExitTryException;
			}
			$user_ids = [];
			foreach ($items as $item) {
				$user_ids[] = $item->getUserId();
			}

			/** @var ClanTournamentUser $OneTeamUser */
			$OneTeamUser = ClanTournamentUser::with('user')->where('tournament_id', '=', $TUser->tournament_id)
				->where('group_id', '=', $TUser->group_id)
				->whereIn('user_id', $user_ids)
				->where('user_id', '!=', $TUser->user_id)
				->where('team_id', '=', $TUser->team_id)
				->where('is_died', '=', 0)
				->where('can_moved_at', '>', $TUser->tournament->ended_at)
				->first();
			if(!$OneTeamUser) {
				$this->app->flash('error', 'Тут же никого');
				throw new ExitTryException;
			}

			$OneTeamUser->can_moved_at = (new \DateTime())->modify('+15 sec')->getTimestamp();
			if(!$OneTeamUser->save()) {
				throw new ExitTryException;
			}

			$db->commit();

			$this->app->flash('success', sprintf('Вы помогли %s подняться из ямы', $OneTeamUser->user->login));
		} catch (ExitTryException $ex) {

		} catch (\Exception $ex) {
			$db->rollBack();
			$this->app->logger->emergency($ex);
		}

		$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'tournament']));
	}

	/**
	 * @throws \Exception
	 */
	public function flagAction()
	{
		$db = DB::connection();
		$db->beginTransaction();
		try {
			$UserLocation = UserLocation::where('user_id', '=', $this->app->webUser->getId())
				->where('in_clan_tournament', '>', 0)
				->first();
			if(!$UserLocation) {
				throw new \Exception();
			}
			/** @var ClanTournamentGroup $Group */
			$Group = ClanTournamentGroup::with(['users.user', 'tournament', 'users.tookItems', 'users.tookItems.mapItem'])
				->where('tournament_id', '=', $UserLocation->location_special_id)
				->where('id', '=', $UserLocation->location_special_id2)
				->whereHas('tournament', function($query) {
					/** @var ClanTournamentUser $query */
					$query->where('is_end', '=', 0);
				})
				->first();

			$TUser = null;
			foreach ($Group->users as $GUser) {
				if($GUser->user_id == $UserLocation->user_id && $GUser->is_died == 0) {
					$TUser = $GUser;
					break;
				}
			}
			if(!$TUser) {
				throw new \Exception();
			}

			$Builder = $this->getBuilder($TUser->user_id, $TUser->tournament_id, $TUser->group_id, $TUser->team_id, $Group->users);
			$flagItem = $Builder->getFlag($TUser->location_y, $TUser->location_x);
			if(!$flagItem) {
				throw new ExitTryException;
			}

			/** @var ClanTournamentUserItems $UserItem */
			$UserItem = null;
			foreach ($TUser->tookItems as $TookItem) {
				if($TookItem->mapItem->item_type == ClanTournamentMapItems::TYPE_FLAG) {
					$UserItem = $TookItem;
					break;
				}
			}
			if($UserItem) {
				$this->app->flash('error', 'У вас уже есть флаг в руках');
				throw new ExitTryException;
			}

			/** @var ClanTournamentMapItems $Flag */
			$Flag = ClanTournamentMapItems::where('id', '=', $flagItem->getId())
				->where('is_taken', '=', 0)->first();
			//не нашли флаг или у пользователя уже есть флаг в руках
			if(!$Flag) {
				throw new ExitTryException();
			}

			$Flag->is_taken = 1;
			$Flag->user_id = $this->user->id;
			$Flag->owner_team_id = $TUser->team_id;
			if(!$Flag->save()) {
				throw new ExitTryException();
			}

			$UserItem = new ClanTournamentUserItems();
			$UserItem->tournament_user_id = $TUser->id;
			$UserItem->map_item_id = $Flag->id;
			$UserItem->tournament_id = $TUser->tournament_id;
			if(!$UserItem->save()) {
				throw new ExitTryException();
			}

			$message = sprintf('<font color="red">Внимание!</font> персонаж %s поднял флаг в секторе %d:%d', $this->user->htmlLogin(), $TUser->location_y, $TUser->location_x);
			$this->messageToGroup($TUser->tournament_id, $TUser->group_id, $message);

			$db->commit();

			$this->app->flash('success', 'Вы подняли флаг');
		} catch (ExitTryException $ex) {

		} catch (\Exception $ex) {
			$db->rollBack();
			$this->app->logger->emergency($ex);
		}

		$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'tournament']));
	}

	private function messageToGroup($tournament_id, $group_id, $message)
	{
		$GroupUsers = ClanTournamentUser::where('tournament_id', '=', $tournament_id)
			->where('group_id', '=', $group_id)
			->where('is_died', '=', 0)
			->get()->toArray();
		$chat_user_ids = [];
		foreach ($GroupUsers as $GUser) {
			$chat_user_ids[] = $GUser['user_id'];
		}

		Chat::addToGroupChatSystem($message, $chat_user_ids, 0);
	}

	/**
	 * @throws \Exception
	 */
	public function moveAction()
	{
		$x = isset($_GET['x']) ? $_GET['x'] : 0;
		$y = isset($_GET['y']) ? $_GET['y'] : 0;

		$db = DB::connection();
		$db->beginTransaction();
		try {
			/** @var User $User */
			$User = User::where('id', '=', $this->app->webUser->getId())->first();

			$UserLocation = UserLocation::where('user_id', '=', $this->app->webUser->getId())
				->where('in_clan_tournament', '>', 0)
				->first();
			if(!$UserLocation) {
				throw new \Exception();
			}
			/** @var ClanTournamentGroup $Group */
			$Group = ClanTournamentGroup::with(['users.user', 'tournament', 'users.tookItems', 'users.tookItems.mapItem'])
				->where('tournament_id', '=', $UserLocation->location_special_id)
				->where('id', '=', $UserLocation->location_special_id2)
				->whereHas('tournament', function($query) {
					/** @var ClanTournamentUser $query */
					$query->where('is_end', '=', 0);
				})
				->first();

			$TUser = null;
			foreach ($Group->users as $GUser) {
				if($GUser->user_id == $UserLocation->user_id && $GUser->is_died == 0) {
					$TUser = $GUser;
					break;
				}
			}
			if(!$TUser) {
				//@TODO check if need go out
				$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'tournament']));
			}

			if ($TUser->can_moved_at > time()) {
				$this->app->flash('error', 'Не так быстро');
				throw new ExitTryException;
			}

			if ($TUser->location_y == $y && $TUser->location_x == $x) {
				$this->app->flash('error', 'Нельзя перейти в локацию, в которой вы уже находитесь');
				throw new ExitTryException;
			}

			$Builder = $this->getBuilder($TUser->user_id, $TUser->tournament_id, $TUser->group_id, $TUser->team_id, $Group->users);
			if ($Builder->canMove($TUser->location_y, $TUser->location_x, $y, $x) == false) {
				$this->app->flash('error', 'Ты куда полез? Тут же преграда');
				throw new ExitTryException;
			}

			$items = $Builder->getItems($y, $x);
			/** @var iMapItem|MapUser $item */
			foreach ($items as $item) {
				$method = sprintf('item%s', ucfirst($item->getType()));
				if (method_exists($this, $method)) {
					if(!in_array($item->getType(), [
						ClanTournamentMapItems::TYPE_FLAG,
						ClanTournamentMapItems::TYPE_USER,
					])) {
						$this->$method($User, $TUser, $item);
					}
				}
			}

			$isFlag = false;
			foreach ($TUser->tookItems as $TookItem) {
				if($TookItem->mapItem->item_type == ClanTournamentMapItems::TYPE_FLAG) {
					$isFlag= true;
					break;
				}
			}

			$TUser->location_y = $y;
			$TUser->location_x = $x;
			$TUser->moved_at = time();
			if ($TUser->can_moved_at <= $TUser->moved_at) {
				$next_time = mt_rand(8, 10);
				if($isFlag) {
					$next_time = mt_rand(13, 15);
				}
				$TUser->can_moved_at = (new \DateTime())->modify('+'.$next_time.' sec')->getTimestamp();
				//$TUser->can_moved_at 	= -1;
			}

			//var_dump($TUser->getAttributes());die;
			if (!$TUser->save()) {
				throw new ExitTryException();
			}

			//region open map for near tiles to user
			$whereCondition = [sprintf('location_y = %d and location_x = %d', $y, $x)];
			$around = $Builder->getAround($y, $x);
			foreach ($around as $yx) {
				$whereCondition[] = sprintf('location_y = %d and location_x = %d', $yx['y'], $yx['x']);
			}
			//endregion

			ClanTournamentSmoke::where('tournament_id', '=', $TUser->tournament_id)
				->where('group_id', '=', $TUser->group_id)
				->where('team_id', '=', $TUser->team_id)
				->whereRaw(sprintf('((%s))', implode(') OR (', $whereCondition)))
				->update(['is_removed' => 1, 'opened_at' => time()]);

			$db->commit();
		} catch (ExitTryException $ex) {

		} catch (\Exception $ex) {
			$db->rollBack();
			$this->app->logger->emergency($ex);
		}

		$this->redirect($this->app->urlFor('clan.tournament', ['action' => 'tournament']));
	}

	/**
	 * @param User $User
	 * @param ClanTournamentUser $TUser
	 * @param iMapItem|MapUser $item
	 * @return bool
	 * @throws \Exception
	 */
	protected function itemBase(User &$User, ClanTournamentUser &$TUser, $item)
	{
		$TUser->load(['tookItems', 'tookItems.mapItem']);

		/** @var ClanTournamentMapItems $Base */
		$Base = ClanTournamentMapItems::where('id', '=', $item->getId())
			->where('is_taken', '=', 0)->first();
		//не нашли базу или не база пользователя
		if(!$Base || $Base->owner_team_id != $TUser->team_id) {
			return false;
		}

		/** @var ClanTournamentUserItems $UserItem */
		$UserItem = null;
		foreach ($TUser->tookItems as $TookItem) {
			if($TookItem->mapItem->item_type == ClanTournamentMapItems::TYPE_FLAG) {
				$UserItem = $TookItem;
				break;
			}
		}

		//у персонажа в руках флаг, засчитываем очки и удаляем предмет
		if($UserItem) {
			$UserItem->mapItem->is_removed = 1;
			$UserItem->mapItem->is_taken = 0;
			if(!$UserItem->mapItem->save()) {
				throw new \Exception();
			}

			//добавляем очки
			/** @var ClanTournamentGroup $TournamentGroup */
			$TournamentGroup = ClanTournamentGroup::where('id', '=', $TUser->group_id)->first();
			if(!$TournamentGroup) {
				//@TODO logging
				throw new \Exception();
			}
			switch ($TUser->team_id) {
				case 1:
					$TournamentGroup->team1_value += 2;
					break;
				case 2:
					$TournamentGroup->team2_value += 2;
					break;
			}

			$flag_count = ClanTournamentMapItems::where('tournament_id', '=', $TournamentGroup->tournament_id)
				->where('group_id', '=', $TournamentGroup->id)
				->where('item_type','=', ClanTournamentMapItems::TYPE_FLAG)
				->where('is_removed', '=', 0)
				->count();
			if(!$flag_count) {
				$TournamentGroup->need_finish = true;

				$_user_ids = [];
				$GUsers = ClanTournamentUser::where('is_died', '=', 0)
					->where('tournament_id', '=', $TUser->tournament_id)
					->where('group_id', '=', $TUser->group_id)->get();
				foreach ($GUsers as $GUser) {
					$_user_ids[] = $GUser->user_id;
				}
				if($_user_ids) {
					User::whereIn('id', $_user_ids)
						->where('room', '=', 402)
						->update(['room' => 401]);

					UserLocation::whereIn('user_id', $_user_ids)
						->where('in_clan_tournament', '>', 0)
						->update([
							'in_clan_tournament' => 0,
							'location_special_id' => 0,
							'location_special_id2' => 0,
							'location_special_id3' => 0
						]);
				}
			}

			if(!$TournamentGroup->save()) {
				throw new \Exception();
			}

			if(!$UserItem->delete()) {
				throw new \Exception();
			}

			$message = sprintf('<font color="red">Внимание!</font> персонаж %s поставил флаг', $User->htmlLogin());
			$this->messageToGroup($TUser->tournament_id, $TUser->group_id, $message);
		}

		return true;
	}

	/**
	 * @param User $User
	 * @param ClanTournamentUser $TUser
	 * @param iMapItem|MapUser $item
	 * @return bool
	 * @throws \Exception
	 */
	protected function itemUser(User &$User, ClanTournamentUser &$TUser, $item)
	{
		return true;
	}

	/**
	 * @param User $User
	 * @throws \Exception
	 */
	protected function prepareUserForFight(User &$User)
	{
		//если есть невед на персе, удаляем
		if($User->hidden > 0) {
			$User->hidden = 0;
			$User->hiddenlog = '';

			Effect::whereIn('type', [1111, 200])
				->where('idiluz', '!=', 0)
				->where('owner', '=', $User->id)
				->delete();
		}

		//fix hp, если у него текущее хп каким-то образом оказалосб больше
		if($User->hp > $User->maxhp) {
			$User->hp = $User->maxhp;
			$User->fullhptime = time();
		}
	}

	/**
	 * @param User $User
	 * @param ClanTournamentUser $TUser
	 * @param iMapItem|MapUser $item
	 * @return bool
	 * @throws \Exception
	 */
	protected function itemFlag(User &$User, ClanTournamentUser &$TUser, $item)
	{
		return true;
	}

	/**
	 * @param User $User
	 * @param ClanTournamentUser $TUser
	 * @param iMapItem|MapUser $item
	 * @return bool
	 * @throws \Exception
	 */
	protected function itemHospital(User &$User, ClanTournamentUser &$TUser, $item)
	{
		if($TUser->hospital_count > 0) {
			$message = sprintf('<font color="red">Внимание!</font> Фонтан доступен только 1 раз за турнир', $User->login);
			Chat::addToChatSystem($message, $User);
			return true;
		}

		$diff = (int)($User->maxhp / 100 * 75);
		if($diff > $User->hp) {
			/** @var ClanTournamentMapItems $Hospital */
			$Hospital = ClanTournamentMapItems::where('id', '=', $item->getId())->first();
			if(!$Hospital) {
				return false;
			}

			$User->fullhptime = time();
			$User->hp = $diff;
			if(!$User->save()) {
				throw new \Exception();
			}

			$TUser->hospital_count += 1;

			$message = sprintf('<font color="red">Внимание!</font> Вы выпили воды из фонтана и почувствовали себя сильнее', $User->login);
		} else {
			$message = sprintf('<font color="red">Внимание!</font> У вас вполне достаточно сил', $User->login);
		}

		Chat::addToChatSystem($message, $User);

		return true;
	}

	/**
	 * @param User $User
	 * @param ClanTournamentUser $TUser
	 * @param iMapItem|MapUser $item
	 * @return bool
	 * @throws \Exception
	 */
	protected function itemMine(User &$User, ClanTournamentUser &$TUser, $item)
	{
		if($item->isTaken()) {
			return false;
		}
		/** @var ClanTournamentMapItems $Mine */
		$Mine = ClanTournamentMapItems::where('id', '=', $item->getId())
			->where('is_taken', '=', 0)->first();
		if(!$Mine) {
			return false;
		}

		$User->fullhptime = time();
		$User->hp = $User->hp - (int)($User->hp / 100 * 90);
		if($User->hp < 0) {
			$User->hp = 0;
		}

		if(!$User->save()) {
			throw new \Exception();
		}

		$Mine->is_taken = 1;
		$Mine->user_id = $User->id;
		$Mine->owner_team_id = $TUser->team_id;
		if(!$Mine->save()) {
			throw new \Exception();
		}

		$message = sprintf('<font color="red">Внимание!</font> персонаж %s нарвался на Ядовитый цветок', $User->htmlLogin());
		$this->messageToGroup($TUser->tournament_id, $TUser->group_id, $message);

		return true;
	}

	/**
	 * @param User $User
	 * @param ClanTournamentUser $TUser
	 * @param iMapItem|MapUser $item
	 * @return bool
	 * @throws \Exception
	 */
	protected function itemPit(User &$User, ClanTournamentUser &$TUser, $item)
	{
		if($item->isTaken()) {
			return false;
		}
		/** @var ClanTournamentMapItems $Pit */
		$Pit = ClanTournamentMapItems::where('id', '=', $item->getId())
			->where('is_taken', '=', 0)->first();
		if(!$Pit) {
			return false;
		}

		$Pit->is_taken = 1;
		$Pit->user_id = $User->id;
		$Pit->owner_team_id = $TUser->team_id;
		if(!$Pit->save()) {
			throw new \Exception();
		}

		$message = sprintf('<font color="red">Внимание!</font> персонаж %s упал в яму', $User->htmlLogin());
		$this->messageToGroup($TUser->tournament_id, $TUser->group_id, $message);

		//не нужно сейвить, дальше еще обработка по коду
		$TUser->can_moved_at = $TUser->tournament->ended_at + 10;

		return true;
	}

	/**
	 * @param User $User
	 * @param ClanTournamentUser $TUser
	 * @param iMapItem|MapUser $item
	 * @return bool
	 * @throws \Exception
	 */
	protected function itemPower(User &$User, ClanTournamentUser &$TUser, $item)
	{
		/** @var ClanTournamentMapItems $Power */
		$Power = ClanTournamentMapItems::where('id', '=', $item->getId())->first();
		if(!$Power || $Power->owner_team_id == $TUser->team_id) {
			return false;
		}

		$message = sprintf('<font color="red">Внимание!</font> персонаж %s захватил "Место захвата"', $User->htmlLogin());
		if($Power->owner_team_id > 0 && $TUser->team_id != $Power->owner_team_id) {
			$message = sprintf('<font color="red">Внимание!</font> персонаж %s отбил "Место захвата"', $User->htmlLogin());
		}

		$Power->is_taken = 1;
		$Power->user_id = $User->id;
		$Power->owner_team_id = $TUser->team_id;
		if(!$Power->save()) {
			throw new \Exception();
		}


		$this->messageToGroup($TUser->tournament_id, $TUser->group_id, $message);

		return true;
	}
}